{"file_contents":{"README.md":{"content":"# Huiswerkcoach Anouk - PWA\n\nEen Nederlandse huiswerkcoach Progressive Web App voor 5 havo leerlingen met voice interaction, AI-begeleiding en dagelijkse planning.\n\n## Features\n\n- üé§ **Voice Check-ins**: Dagelijkse spraakopnames voor taakplanning (max 60s)\n- üìù **Taakbeheer**: Automatische taken aanmaken via AI, prioritering en voortgangtracking\n- üìÖ **Roosterbeheer**: Handmatige invoer van lessen en toetsen\n- ü§ñ **AI Uitleg**: \"Ik snap dit niet\" functionaliteit met OCR, stapsgewijze uitleg en quizzen\n- üë®‚Äçüë©‚Äçüëß‚Äçüë¶ **Parent Dashboard**: Readonly overzicht voor ouders\n- ‚è∞ **Dagelijkse Reminders**: Automatische herinneringen via email\n- üì± **PWA**: Installeerbaar, offline-ready, mobile-first\n\n## Tech Stack\n\n### Frontend\n- **React + Vite**: Modern build tooling\n- **Wouter**: Lightweight routing\n- **Shadcn UI + Tailwind CSS**: Component library en styling\n- **TanStack Query**: Data fetching en caching\n- **Supabase Auth**: Authenticatie\n\n### Backend  \n- **Express.js**: REST API server\n- **Supabase/Neon Postgres**: Database via Drizzle ORM\n- **OpenAI**: Whisper (ASR) + GPT-5 (planning/uitleg)\n- **Azure TTS**: Nederlandse spraaksynthese\n- **Google Vision**: OCR voor foto's/PDFs\n\n## Setup & Installation\n\n### 1. Kloon Repository\n```bash\ngit clone <repository-url>\ncd huiswerkcoach-anouk\nnpm install\n","size_bytes":1336},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Huiswerkcoach Anouk - PWA\n\n## Overview\n\nHuiswerkcoach Anouk is a Dutch Progressive Web App designed to help 5 havo students with homework planning and subject-specific tutoring. The application combines voice interaction with AI-powered assistance to provide daily check-ins, automated task planning, and step-by-step explanations for difficult topics. Students can record daily voice check-ins that get transcribed and converted into actionable tasks, while parents have read-only access to monitor progress and upcoming tests.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n**CRITICAL: SUPABASE ONLY DATABASE POLICY**\n- ONLY use Supabase for database operations - NEVER Neon or other providers\n- User has explicitly requested multiple times to ONLY use Supabase\n- Database should be visible in Supabase table editor\n- All data must go to Supabase database, not Neon\n- Do NOT ask for database passwords again - use existing Supabase setup\n\n## System Architecture\n\n### Frontend Architecture\nThe frontend is built as a Progressive Web App using React with Vite for modern build tooling. The application follows a mobile-first design approach using shadcn/ui components styled with Tailwind CSS. The routing is handled by Wouter, a lightweight routing library. TanStack Query manages data fetching and caching, providing a smooth user experience with offline capabilities through service workers.\n\nThe application is structured around four main tabs:\n- **Vandaag (Today)**: Voice check-ins, priority tasks, and daily schedule\n- **Planning**: Weekly task overview and completion tracking\n- **Rooster (Schedule)**: Manual lesson and test entry\n- **Help**: OCR-powered homework assistance with step-by-step explanations\n\n### Backend Architecture\nThe backend is an Express.js REST API server that handles all business logic and external service integrations. The server follows a modular approach with separate services for different functionalities:\n\n- **Voice Processing**: Audio transcription using OpenAI Whisper\n- **Task Planning**: AI-powered task creation from voice transcripts using GPT-5\n- **Content Understanding**: OCR processing via Google Vision API for homework help\n- **Audio Generation**: Dutch text-to-speech using Azure TTS\n- **Scheduled Tasks**: Cron jobs for daily reminder emails\n\n### Data Storage\nThe application uses PostgreSQL as the primary database via SUPABASE ONLY, accessed through Drizzle ORM for type-safe database operations. The database schema supports multiple user roles (student/parent), courses, schedules, tasks, and user sessions. NEVER use Neon or any other database provider - ONLY Supabase.\n\nKey database entities include:\n- Users with role-based access (student/parent)\n- Courses and schedule management\n- Task tracking with priority and status\n- Voice session transcripts and summaries\n- Homework materials and quiz results\n\n### Authentication and Authorization\nAuthentication is handled through Supabase Auth, providing secure email-based login with role differentiation between students and parents. The system maintains session state across the PWA and ensures parents have read-only access to their student's data.\n\n### Voice Processing Pipeline\nThe voice interaction system processes user recordings through a multi-step pipeline:\n1. Audio capture with WebRTC MediaRecorder API\n2. Transcription via OpenAI Whisper\n3. Task extraction using GPT-5 natural language processing\n4. Automatic task creation and prioritization\n5. Response generation with Dutch TTS audio feedback\n\n### AI-Powered Help System\nThe homework assistance feature combines multiple AI services:\n- OCR text extraction from photos/PDFs using Google Vision\n- Subject matter recognition and explanation generation\n- Step-by-step problem solving with examples\n- Interactive quizzes to test understanding\n- Audio explanations in Dutch using Azure TTS\n\n## External Dependencies\n\n### Core Services\n- **Supabase**: Authentication and PRIMARY database hosting (ONLY database provider)\n- **OpenAI**: Whisper for speech-to-text and GPT-5 for task planning and explanations\n- **Azure Cognitive Services**: Text-to-speech for Dutch audio generation\n- **Google Cloud Vision**: OCR processing for homework images and PDFs\n\n### Development and Infrastructure\n- **Drizzle ORM**: Type-safe database queries and migrations\n- **Node-cron**: Scheduled task execution for daily reminders\n- **Multer**: File upload handling for audio and image processing\n- **React Query**: Client-side data fetching and state management\n\n### Email Services\n- Email provider integration (Postmark/SendGrid) for daily reminder notifications\n- Configurable reminder timing through environment variables\n\n### PWA Infrastructure\n- Service Worker for offline functionality and caching\n- Web App Manifest for installable app experience\n- MediaRecorder API for voice recording capabilities\n- File API for image/PDF uploads\n\nThe architecture prioritizes privacy, with all data processing happening through established service providers and no persistent audio storage beyond transcription needs.","size_bytes":5095},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    // Replit-only plugin in dev; wordt niet gebruikt op Vercel (NODE_ENV=production)\n    ...(process.env.NODE_ENV !== \"production\" && process.env.REPL_ID\n      ? [ (await import(\"@replit/vite-plugin-cartographer\")).cartographer() ]\n      : []),\n  ],\n  // Vite root is de 'client' map\n  root: \"client\",\n  resolve: {\n    alias: {\n      // Omdat root 'client' is, is 'src' al onder root.\n      \"@\": path.resolve(process.cwd(), \"client/src\"),\n      \"@shared\": path.resolve(process.cwd(), \"shared\"),\n      \"@assets\": path.resolve(process.cwd(), \"attached_assets\"),\n    },\n  },\n  build: {\n    // BELANGRIJK: relative outDir t.o.v. Vite root -> 'client/dist'\n    outDir: \"dist\",\n    assetsDir: \"assets\",\n    emptyOutDir: true,\n  },\n  base: \"/\", // correcte asset-paden in productie\n  server: {\n    fs: { strict: true, deny: [\"**/.*\"] },\n  },\n});\n","size_bytes":1103},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { startDailyReminderCron } from \"./services/cron\";\nimport { cronManager } from \"./cronJobs\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // Start cron jobs\n  if (app.get(\"env\") === \"production\") {\n    startDailyReminderCron();\n    log(\"Daily reminder cron job started\");\n    cronManager.start();\n  } else if (app.get(\"env\") === \"development\") {\n    // Start calendar sync in development too (with test schedule)\n    cronManager.start();\n  }\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2473},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport multer from \"multer\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { storage } from \"./storage\";\nimport { transcribeAudio, generatePlan, generateExplanation, expandExplanation } from \"./services/openai\";\nimport { checkAndSendReminders } from \"./services/cron\";\nimport { signUp as supabaseSignUp, signIn as supabaseSignIn, signOut as supabaseSignOut } from \"./services/supabase\";\nimport { insertTaskSchema, insertSessionSchema, insertScheduleSchema, insertUserSchema, insertCourseSchema } from \"@shared/schema\";\nimport { GoogleCalendarService } from \"./googleCalendar\";\nimport { calendarImporter } from \"./calendarImport\";\nimport { cronManager } from \"./cronJobs\";\n\nconst upload = multer({ dest: 'uploads/' });\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Health check\n  app.get(\"/api/health\", (req, res) => {\n    res.json({ status: \"OK\", timestamp: new Date().toISOString() });\n  });\n\n  // Authentication routes\n  app.post(\"/api/auth/signup\", async (req, res) => {\n    try {\n      const { email, password, name, role, educationLevel, grade } = req.body;\n      \n      if (!email || !password || !name || !role) {\n        return res.status(400).json({ error: \"Missing required fields\" });\n      }\n\n      // For students, require education level and grade\n      if (role === 'student' && (!educationLevel || !grade)) {\n        return res.status(400).json({ error: \"Students must provide education level and grade\" });\n      }\n\n      // Create user in Supabase Auth\n      const supabaseResult = await supabaseSignUp(email, password, name, role);\n      \n      // Create user in our database with additional fields\n      try {\n        const userData = {\n          id: supabaseResult.user?.id || `user-${Date.now()}`,\n          email,\n          name,\n          role,\n          educationLevel: role === 'student' ? educationLevel : null,\n          grade: role === 'student' ? parseInt(grade) : null,\n        };\n        \n        await storage.createUser(userData);\n      } catch (dbError) {\n        console.warn(\"Database sync failed, but auth succeeded:\", dbError);\n      }\n      \n      res.json(supabaseResult);\n    } catch (error) {\n      console.error(\"Signup error:\", error);\n      res.status(500).json({ error: (error as Error).message || \"Failed to create account\" });\n    }\n  });\n\n  app.post(\"/api/auth/signin\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      \n      if (!email || !password) {\n        return res.status(400).json({ error: \"Missing email or password\" });\n      }\n\n      const result = await supabaseSignIn(email, password);\n      res.json(result);\n    } catch (error) {\n      console.error(\"Signin error:\", error);\n      res.status(500).json({ error: (error as Error).message || \"Failed to sign in\" });\n    }\n  });\n\n  app.post(\"/api/auth/signout\", async (req, res) => {\n    try {\n      await supabaseSignOut();\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Signout error:\", error);\n      res.status(500).json({ error: (error as Error).message || \"Failed to sign out\" });\n    }\n  });\n\n  // ASR endpoint\n  app.post(\"/api/asr\", upload.single(\"audio\"), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: \"No audio file provided\" });\n      }\n\n      const { text } = await transcribeAudio(req.file.path);\n      \n      // Clean up uploaded file\n      fs.unlinkSync(req.file.path);\n      \n      res.json({ transcript: text });\n    } catch (error) {\n      console.error(\"ASR error:\", error);\n      res.status(500).json({ error: \"Failed to transcribe audio\" });\n    }\n  });\n\n  // Planning endpoint\n  app.post(\"/api/plan\", async (req, res) => {\n    try {\n      const { transcript, date, userId } = req.body;\n      \n      if (!transcript || !userId) {\n        return res.status(400).json({ error: \"Missing transcript or userId\" });\n      }\n\n      const plan = await generatePlan(transcript, date || new Date().toISOString());\n      \n      // Create tasks in database\n      const createdTasks = [];\n      for (const taskData of plan.tasks) {\n        // Find course by name\n        const courses = await storage.getCoursesByUserId(userId);\n        const course = courses.find(c => c.name === taskData.course);\n        \n        // Ensure valid date - if taskData.due_at is invalid, use tomorrow\n        let dueDate;\n        try {\n          dueDate = taskData.due_at ? new Date(taskData.due_at) : new Date();\n          if (isNaN(dueDate.getTime())) {\n            // Invalid date, default to tomorrow\n            dueDate = new Date();\n            dueDate.setDate(dueDate.getDate() + 1);\n          }\n        } catch {\n          // Fallback to tomorrow\n          dueDate = new Date();\n          dueDate.setDate(dueDate.getDate() + 1);\n        }\n        \n        const task = await storage.createTask({\n          userId,\n          courseId: course?.id || null,\n          title: taskData.title,\n          dueAt: dueDate,\n          estMinutes: taskData.est_minutes || 30,\n          priority: taskData.priority || 1,\n          source: \"check-in\",\n          status: \"todo\"\n        });\n        createdTasks.push(task);\n      }\n\n      // Create session record\n      await storage.createSession({\n        userId,\n        transcript,\n        summary: plan.coach_text,\n        coachText: plan.coach_text\n      });\n\n      res.json({\n        tasks: createdTasks,\n        coach_text: plan.coach_text\n      });\n    } catch (error) {\n      console.error(\"Planning error:\", error);\n      res.status(500).json({ error: \"Failed to create plan\" });\n    }\n  });\n\n  // TTS endpoint\n  app.post(\"/api/tts\", async (req, res) => {\n    try {\n      const { text } = req.body;\n      \n      if (!text) {\n        return res.status(400).json({ error: \"No text provided\" });\n      }\n\n      // For now, return null to indicate no audio available\n      // In production, use Azure TTS or similar\n      res.json({ audioUrl: null });\n    } catch (error) {\n      console.error(\"TTS error:\", error);\n      res.status(500).json({ error: \"Failed to generate speech\" });\n    }\n  });\n\n  // OCR endpoint\n  app.post(\"/api/ocr\", upload.single(\"image\"), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: \"No image file provided\" });\n      }\n\n      // Dummy OCR response for now\n      const dummyText = \"Bereken de sinus van hoek A in een rechthoekige driehoek waar de overstaande zijde 6 cm is en de schuine zijde 10 cm.\";\n      \n      // Clean up uploaded file\n      fs.unlinkSync(req.file.path);\n      \n      res.json({ text: dummyText });\n    } catch (error) {\n      console.error(\"OCR error:\", error);\n      res.status(500).json({ error: \"Failed to process image\" });\n    }\n  });\n\n  // Explanation endpoint\n  app.post(\"/api/explain\", async (req, res) => {\n    try {\n      const { mode, text, ocrText, course } = req.body;\n      \n      if (!mode || (!text && !ocrText)) {\n        return res.status(400).json({ error: \"Missing required parameters\" });\n      }\n\n      const explanation = await generateExplanation(mode, text, ocrText, course);\n      \n      res.json(explanation);\n    } catch (error) {\n      console.error(\"Explanation error:\", error);\n      res.status(500).json({ error: \"Failed to generate explanation\" });\n    }\n  });\n\n  // Expand explanation endpoint\n  app.post(\"/api/explain/expand\", async (req, res) => {\n    try {\n      const { originalExplanation, topic, course } = req.body;\n      \n      if (!originalExplanation || !topic || !course) {\n        return res.status(400).json({ error: \"Missing required parameters\" });\n      }\n\n      const expandedExplanation = await expandExplanation(originalExplanation, topic, course);\n      \n      res.json(expandedExplanation);\n    } catch (error) {\n      console.error(\"Expand explanation error:\", error);\n      res.status(500).json({ error: \"Failed to expand explanation\" });\n    }\n  });\n\n  // Courses management\n  app.get(\"/api/courses/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const courses = await storage.getCoursesByUserId(userId);\n      res.json(courses);\n    } catch (error) {\n      console.error(\"Courses fetch error:\", error);\n      res.status(500).json({ error: \"Failed to fetch courses\" });\n    }\n  });\n\n  app.post(\"/api/courses\", async (req, res) => {\n    try {\n      const courseData = req.body;\n      \n      // Ensure user exists in our database (sync from Supabase auth)\n      const userId = courseData.userId;\n      if (userId) {\n        const existingUser = await storage.getUser(userId);\n        if (!existingUser) {\n          // Create user record from Supabase auth data\n          try {\n            await storage.createUser({\n              id: userId,\n              email: \"user@example.com\", // Will be updated with real data later\n              name: \"User\",\n              role: \"student\"\n            });\n            console.log(`‚úÖ Created user record for ${userId}`);\n          } catch (userError) {\n            console.log(`User ${userId} might already exist, continuing...`);\n          }\n        }\n      }\n      \n      const created = await storage.createCourse(courseData);\n      res.json(created);\n    } catch (error) {\n      console.error(\"Course create error:\", error);\n      res.status(500).json({ error: \"Failed to create course\" });\n    }\n  });\n\n  app.delete(\"/api/courses/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteCourse(id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Course delete error:\", error);\n      res.status(500).json({ error: \"Failed to delete course\" });\n    }\n  });\n\n  // Schedule management\n  app.get(\"/api/schedule/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const scheduleItems = await storage.getScheduleByUserId(userId);\n      res.json(scheduleItems);\n    } catch (error) {\n      console.error(\"Schedule fetch error:\", error);\n      res.status(500).json({ error: \"Failed to fetch schedule\" });\n    }\n  });\n\n  app.post(\"/api/schedule\", async (req, res) => {\n    try {\n      // Skip validation for in-memory storage to allow non-UUID IDs\n      const scheduleData = req.body;\n      const created = await storage.createScheduleItem(scheduleData);\n      res.json(created);\n    } catch (error) {\n      console.error(\"Schedule create error:\", error);\n      res.status(500).json({ error: \"Failed to create schedule item\" });\n    }\n  });\n\n  app.get(\"/api/schedule/:userId/today\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const today = new Date();\n      const dayOfWeek = today.getDay(); // 0=Sunday, 1=Monday, etc\n      const adjustedDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek; // Convert Sunday (0) to 7\n      \n      console.log(`Today is ${today.toDateString()}, day of week: ${dayOfWeek}, adjusted: ${adjustedDayOfWeek}`);\n      \n      const scheduleItems = await storage.getScheduleByDay(userId, adjustedDayOfWeek);\n      console.log(`Found ${scheduleItems.length} schedule items for today:`, scheduleItems);\n      \n      res.json(scheduleItems);\n    } catch (error) {\n      console.error(\"Today schedule fetch error:\", error);\n      res.status(500).json({ error: \"Failed to fetch today's schedule\" });\n    }\n  });\n\n  app.delete(\"/api/schedule/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteScheduleItem(id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Schedule delete error:\", error);\n      res.status(500).json({ error: \"Failed to delete schedule item\" });\n    }\n  });\n\n  // Import iCal schedule\n  app.post(\"/api/schedule/import-ical\", async (req, res) => {\n    try {\n      const { userId, icalUrl } = req.body;\n      \n      if (!userId || !icalUrl) {\n        return res.status(400).json({ error: \"Missing userId or icalUrl\" });\n      }\n\n      // Ensure user exists in our database (sync from Supabase auth)\n      const existingUser = await storage.getUser(userId);\n      if (!existingUser) {\n        // Create user record from Supabase auth data\n        try {\n          await storage.createUser({\n            id: userId,\n            email: \"user@example.com\", // Will be updated with real data later\n            name: \"User\",\n            role: \"student\"\n          });\n          console.log(`‚úÖ Created user record for ${userId}`);\n        } catch (userError) {\n          console.log(`User ${userId} might already exist, continuing...`);\n        }\n      }\n\n      // Import iCal events\n      const { default: ical } = await import('node-ical');\n      \n      console.log(`üìÖ Fetching iCal from: ${icalUrl}`);\n      const events = await ical.async.fromURL(icalUrl);\n      \n      let scheduleCount = 0;\n      const courseNames = new Set<string>();\n      \n      for (const key in events) {\n        const event = events[key];\n        \n        // Only process VEVENT components\n        if (event.type !== 'VEVENT') continue;\n        \n        const summary = event.summary || \"Onbekend event\";\n        const startDate = event.start;\n        const endDate = event.end;\n        \n        if (!startDate || !endDate) continue;\n        \n        // Extract course name from summary (common patterns)\n        let courseName = \"Algemeen\";\n        const summaryStr = summary.toString().toLowerCase();\n        \n        // Common Dutch school subjects\n        if (summaryStr.includes('wiskundig') || summaryStr.includes('wiskunde')) courseName = \"Wiskunde\";\n        else if (summaryStr.includes('nederlands')) courseName = \"Nederlands\";\n        else if (summaryStr.includes('engels')) courseName = \"Engels\";\n        else if (summaryStr.includes('geschiedenis')) courseName = \"Geschiedenis\";\n        else if (summaryStr.includes('aardrijkskunde')) courseName = \"Aardrijkskunde\";\n        else if (summaryStr.includes('biologie')) courseName = \"Biologie\";\n        else if (summaryStr.includes('scheikunde')) courseName = \"Scheikunde\";\n        else if (summaryStr.includes('natuurkunde')) courseName = \"Natuurkunde\";\n        else if (summaryStr.includes('economie')) courseName = \"Economie\";\n        else if (summaryStr.includes('frans')) courseName = \"Frans\";\n        else if (summaryStr.includes('duits')) courseName = \"Duits\";\n        else if (summaryStr.includes('sport') || summaryStr.includes('lichamel')) courseName = \"Lichamelijke Opvoeding\";\n        else if (summaryStr.includes('kunst') || summaryStr.includes('tekenen')) courseName = \"Kunst\";\n        else if (summaryStr.includes('muziek')) courseName = \"Muziek\";\n        else if (summaryStr.includes('informatica') || summaryStr.includes('computer')) courseName = \"Informatica\";\n        else if (summaryStr.includes('toets') || summaryStr.includes('test') || summaryStr.includes('exam')) {\n          // For tests, try to extract subject from the rest of the title\n          const words = summaryStr.split(/[^\\w]+/);\n          for (const word of words) {\n            if (word.includes('wisk')) { courseName = \"Wiskunde\"; break; }\n            if (word.includes('ned')) { courseName = \"Nederlands\"; break; }\n            if (word.includes('eng')) { courseName = \"Engels\"; break; }\n            if (word.includes('gesch')) { courseName = \"Geschiedenis\"; break; }\n            if (word.includes('bio')) { courseName = \"Biologie\"; break; }\n          }\n        }\n        \n        courseNames.add(courseName);\n        \n        // Find or create course\n        let courses = await storage.getCoursesByUserId(userId);\n        let course = courses.find(c => c.name === courseName);\n        \n        if (!course) {\n          course = await storage.createCourse({\n            userId,\n            name: courseName,\n            level: \"havo5\"\n          });\n        }\n        \n        // Determine if it's a test or lesson\n        const isTest = summaryStr.includes('toets') || summaryStr.includes('test') || \n                      summaryStr.includes('exam') || summaryStr.includes('proefwerk');\n        \n        // Create schedule item\n        const dayOfWeek = startDate.getDay() === 0 ? 7 : startDate.getDay(); // Convert Sunday from 0 to 7\n        const startTime = `${startDate.getHours().toString().padStart(2, '0')}:${startDate.getMinutes().toString().padStart(2, '0')}:00`;\n        const endTime = `${endDate.getHours().toString().padStart(2, '0')}:${endDate.getMinutes().toString().padStart(2, '0')}:00`;\n        \n        await storage.createScheduleItem({\n          userId,\n          courseId: course.id,\n          dayOfWeek,\n          startTime,\n          endTime,\n          kind: isTest ? \"toets\" : \"les\",\n          title: summary.toString(),\n          date: isTest ? startDate.toISOString().split('T')[0] : null\n        });\n        \n        scheduleCount++;\n      }\n      \n      console.log(`‚úÖ Imported ${scheduleCount} schedule items and ${courseNames.size} courses`);\n      \n      res.json({\n        success: true,\n        scheduleCount,\n        courseCount: courseNames.size,\n        courses: Array.from(courseNames)\n      });\n      \n    } catch (error) {\n      console.error(\"iCal import error:\", error);\n      res.status(500).json({ \n        error: \"Failed to import iCal\", \n        details: (error as Error).message \n      });\n    }\n  });\n\n  // Task management\n  app.get(\"/api/tasks/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const tasks = await storage.getTasksByUserId(userId);\n      res.json(tasks);\n    } catch (error) {\n      console.error(\"Tasks fetch error:\", error);\n      res.status(500).json({ error: \"Failed to fetch tasks\" });\n    }\n  });\n\n  app.get(\"/api/tasks/:userId/today\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const tasks = await storage.getTodayTasks(userId);\n      res.json(tasks);\n    } catch (error) {\n      console.error(\"Today tasks fetch error:\", error);\n      res.status(500).json({ error: \"Failed to fetch today's tasks\" });\n    }\n  });\n\n  app.patch(\"/api/tasks/:id/status\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { status } = req.body;\n      await storage.updateTaskStatus(id, status);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Task status update error:\", error);\n      res.status(500).json({ error: \"Failed to update task status\" });\n    }\n  });\n\n  // Create manual task\n  app.post(\"/api/tasks\", async (req, res) => {\n    try {\n      const taskData = req.body;\n      \n      // Ensure user exists in our database (sync from Supabase auth)\n      const userId = taskData.userId;\n      if (userId) {\n        const existingUser = await storage.getUser(userId);\n        if (!existingUser) {\n          // Create user record from Supabase auth data\n          try {\n            await storage.createUser({\n              id: userId,\n              email: \"user@example.com\", // Will be updated with real data later\n              name: \"User\",\n              role: \"student\"\n            });\n            console.log(`‚úÖ Created user record for ${userId}`);\n          } catch (userError) {\n            console.log(`User ${userId} might already exist, continuing...`);\n          }\n        }\n      }\n      \n      // Ensure dueAt is a proper Date object\n      if (taskData.dueAt && typeof taskData.dueAt === 'string') {\n        taskData.dueAt = new Date(taskData.dueAt);\n        if (isNaN(taskData.dueAt.getTime())) {\n          // Invalid date, use tomorrow as fallback\n          taskData.dueAt = new Date();\n          taskData.dueAt.setDate(taskData.dueAt.getDate() + 1);\n        }\n      } else if (!taskData.dueAt) {\n        // No date provided, use tomorrow\n        taskData.dueAt = new Date();\n        taskData.dueAt.setDate(taskData.dueAt.getDate() + 1);\n      }\n      \n      const created = await storage.createTask(taskData);\n      res.json(created);\n    } catch (error) {\n      console.error(\"Task create error:\", error);\n      res.status(500).json({ error: \"Failed to create task\" });\n    }\n  });\n\n  // Delete task\n  app.delete(\"/api/tasks/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteTask(id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Task delete error:\", error);\n      res.status(500).json({ error: \"Failed to delete task\" });\n    }\n  });\n\n  // Cron endpoint for daily reminders\n  app.post(\"/api/cron/daily-reminder\", async (req, res) => {\n    try {\n      const result = await checkAndSendReminders();\n      res.json(result);\n    } catch (error) {\n      console.error(\"Daily reminder error:\", error);\n      res.status(500).json({ error: \"Failed to process daily reminders\" });\n    }\n  });\n\n  // Parent-Child relationship routes\n  app.post(\"/api/parent/add-child\", async (req, res) => {\n    try {\n      const { parentId, childEmail, childName } = req.body;\n      \n      if (!parentId || !childEmail || !childName) {\n        return res.status(400).json({ error: \"Missing required fields\" });\n      }\n\n      // Check if child exists\n      const child = await storage.findChildByEmail(childEmail);\n      if (!child) {\n        return res.status(404).json({ error: \"Child not found with this email address\" });\n      }\n\n      if (child.role !== 'student') {\n        return res.status(400).json({ error: \"Only student accounts can be added as children\" });\n      }\n\n      // Create the relationship\n      const relationship = await storage.createParentChildRelationship({\n        parentId,\n        childId: child.id,\n        childEmail,\n        childName,\n        isConfirmed: false, // Child needs to confirm\n      });\n\n      res.json({ success: true, relationship });\n    } catch (error) {\n      console.error(\"Add child error:\", error);\n      res.status(500).json({ error: \"Failed to add child\" });\n    }\n  });\n\n  app.get(\"/api/parent/:parentId/children\", async (req, res) => {\n    try {\n      const { parentId } = req.params;\n      const relationships = await storage.getChildrenByParentId(parentId);\n      \n      // Get full child user data\n      const childrenData = await Promise.all(\n        relationships.map(async (rel) => {\n          const child = await storage.getUser(rel.childId);\n          return {\n            relationship: rel,\n            child: child\n          };\n        })\n      );\n\n      res.json(childrenData);\n    } catch (error) {\n      console.error(\"Get children error:\", error);\n      res.status(500).json({ error: \"Failed to get children\" });\n    }\n  });\n\n  app.post(\"/api/student/confirm-parent/:relationshipId\", async (req, res) => {\n    try {\n      const { relationshipId } = req.params;\n      await storage.confirmRelationship(relationshipId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Confirm parent error:\", error);\n      res.status(500).json({ error: \"Failed to confirm parent relationship\" });\n    }\n  });\n\n  // Get child data for parent (tasks, schedule, etc)\n  app.get(\"/api/parent/child/:childId/tasks\", async (req, res) => {\n    try {\n      const { childId } = req.params;\n      const tasks = await storage.getTasksByUserId(childId);\n      res.json(tasks);\n    } catch (error) {\n      console.error(\"Get child tasks error:\", error);\n      res.status(500).json({ error: \"Failed to get child tasks\" });\n    }\n  });\n\n  app.get(\"/api/parent/child/:childId/schedule\", async (req, res) => {\n    try {\n      const { childId } = req.params;\n      const schedule = await storage.getScheduleByUserId(childId);\n      res.json(schedule);\n    } catch (error) {\n      console.error(\"Get child schedule error:\", error);\n      res.status(500).json({ error: \"Failed to get child schedule\" });\n    }\n  });\n\n  // Get pending parent requests for student\n  app.get(\"/api/student/:studentId/parent-requests\", async (req, res) => {\n    try {\n      const { studentId } = req.params;\n      const relationships = await storage.getPendingParentRequests(studentId);\n      res.json(relationships);\n    } catch (error) {\n      console.error(\"Get parent requests error:\", error);\n      res.status(500).json({ error: \"Failed to get parent requests\" });\n    }\n  });\n\n  // ===== GOOGLE CALENDAR ROUTES =====\n  \n  const googleCalendar = new GoogleCalendarService();\n  \n  // Get calendar integration status\n  app.get(\"/api/calendar/status/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const integration = await storage.getCalendarIntegration(userId);\n      \n      res.json({\n        connected: !!integration,\n        syncEnabled: integration?.syncEnabled || false,\n        lastSync: integration?.lastSyncAt,\n        provider: integration?.provider || null\n      });\n    } catch (error) {\n      console.error(\"Calendar status error:\", error);\n      res.status(500).json({ error: \"Failed to get calendar status\" });\n    }\n  });\n  \n  // Start OAuth flow\n  app.get(\"/api/calendar/connect/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const authUrl = googleCalendar.getAuthUrl(userId);\n      res.json({ authUrl });\n    } catch (error) {\n      console.error(\"Calendar connect error:\", error);\n      res.status(500).json({ error: \"Failed to initiate calendar connection\" });\n    }\n  });\n  \n  // OAuth callback\n  app.get(\"/api/calendar/callback\", async (req, res) => {\n    try {\n      const { code, state: userId } = req.query;\n      \n      if (!code || !userId) {\n        return res.status(400).json({ error: \"Missing authorization code or user ID\" });\n      }\n      \n      // Exchange code for tokens\n      const tokens = await googleCalendar.getTokensFromCode(code as string);\n      \n      // Get primary calendar ID\n      googleCalendar.setCredentials({\n        accessToken: tokens.access_token,\n        refreshToken: tokens.refresh_token,\n        tokenExpires: tokens.expiry_date ? new Date(tokens.expiry_date) : null,\n      } as any);\n      \n      const calendarId = await googleCalendar.getPrimaryCalendarId();\n      \n      // Save integration\n      const integrationData = {\n        userId: userId as string,\n        provider: 'google' as const,\n        accessToken: tokens.access_token,\n        refreshToken: tokens.refresh_token,\n        tokenExpires: tokens.expiry_date ? new Date(tokens.expiry_date) : null,\n        calendarId,\n        syncEnabled: true,\n      };\n      \n      await storage.createCalendarIntegration(integrationData);\n      \n      // Trigger immediate import\n      setTimeout(async () => {\n        try {\n          await calendarImporter.importEventsForUser(userId as string);\n        } catch (importError) {\n          console.error('Initial import failed:', importError);\n        }\n      }, 1000);\n      \n      // Redirect to success page\n      res.redirect('/?calendar=connected');\n      \n    } catch (error) {\n      console.error(\"Calendar callback error:\", error);\n      res.redirect('/?calendar=error');\n    }\n  });\n  \n  // Disconnect calendar\n  app.post(\"/api/calendar/disconnect/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      await storage.deleteCalendarIntegration(userId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Calendar disconnect error:\", error);\n      res.status(500).json({ error: \"Failed to disconnect calendar\" });\n    }\n  });\n  \n  // Manual sync trigger\n  app.post(\"/api/calendar/sync/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const result = await calendarImporter.importEventsForUser(userId);\n      res.json(result);\n    } catch (error) {\n      console.error(\"Manual sync error:\", error);\n      res.status(500).json({ error: \"Failed to sync calendar\" });\n    }\n  });\n  \n  // Get cron job status (admin)\n  app.get(\"/api/calendar/cron/status\", async (req, res) => {\n    try {\n      const status = cronManager.getStatus();\n      res.json(status);\n    } catch (error) {\n      console.error(\"Cron status error:\", error);\n      res.status(500).json({ error: \"Failed to get cron status\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":28095},"server/storage.ts":{"content":"import { db } from \"./db\";\nimport { eq, and, gte, lte, desc, sql } from \"drizzle-orm\";\nimport {\n  users,\n  courses,\n  schedule,\n  tasks,\n  sessions,\n  materials,\n  quizResults,\n  parentChildRelationships,\n  calendarIntegrations,\n  importedEvents,\n  type User,\n  type InsertUser,\n  type Course,\n  type InsertCourse,\n  type Schedule,\n  type InsertSchedule,\n  type Task,\n  type InsertTask,\n  type Session,\n  type InsertSession,\n  type Material,\n  type InsertMaterial,\n  type QuizResult,\n  type InsertQuizResult,\n  type ParentChildRelationship,\n  type InsertParentChildRelationship,\n  type CalendarIntegration,\n  type InsertCalendarIntegration,\n  type ImportedEvent,\n  type InsertImportedEvent,\n} from \"@shared/schema\";\n\n// Use the centralized database connection from db.ts\n// No need for separate database initialization - use the imported db\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Courses\n  getCoursesByUserId(userId: string): Promise<Course[]>;\n  createCourse(course: InsertCourse): Promise<Course>;\n  deleteCourse(id: string): Promise<void>;\n  \n  // Schedule\n  getScheduleByUserId(userId: string): Promise<Schedule[]>;\n  getScheduleByDay(userId: string, dayOfWeek: number): Promise<Schedule[]>;\n  createScheduleItem(schedule: InsertSchedule): Promise<Schedule>;\n  deleteScheduleItem(id: string): Promise<void>;\n  \n  // Tasks\n  getTasksByUserId(userId: string): Promise<Task[]>;\n  getTodayTasks(userId: string): Promise<Task[]>;\n  getTasksByDateRange(userId: string, startDate: Date, endDate: Date): Promise<Task[]>;\n  createTask(task: InsertTask): Promise<Task>;\n  updateTaskStatus(id: string, status: string): Promise<void>;\n  \n  // Sessions\n  getLastSession(userId: string): Promise<Session | undefined>;\n  getTodaySession(userId: string): Promise<Session | undefined>;\n  createSession(session: InsertSession): Promise<Session>;\n  \n  // Materials\n  createMaterial(material: InsertMaterial): Promise<Material>;\n  \n  // Quiz Results\n  createQuizResult(result: InsertQuizResult): Promise<QuizResult>;\n  \n  // Parent-Child Relationships\n  createParentChildRelationship(relationship: InsertParentChildRelationship): Promise<ParentChildRelationship>;\n  getChildrenByParentId(parentId: string): Promise<ParentChildRelationship[]>;\n  findChildByEmail(childEmail: string): Promise<User | undefined>;\n  confirmRelationship(relationshipId: string): Promise<void>;\n  getPendingParentRequests(childId: string): Promise<ParentChildRelationship[]>;\n  \n  // Calendar Integrations\n  getCalendarIntegration(userId: string): Promise<CalendarIntegration | undefined>;\n  createCalendarIntegration(integration: InsertCalendarIntegration): Promise<CalendarIntegration>;\n  updateCalendarIntegration(userId: string, updates: Partial<CalendarIntegration>): Promise<void>;\n  deleteCalendarIntegration(userId: string): Promise<void>;\n  \n  // Imported Events\n  getImportedEvent(userId: string, externalId: string): Promise<ImportedEvent | undefined>;\n  createImportedEvent(event: InsertImportedEvent): Promise<ImportedEvent>;\n  getImportedEventsByUserId(userId: string): Promise<ImportedEvent[]>;\n}\n\nexport class PostgresStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id));\n    return result[0];\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.email, email));\n    return result[0];\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const result = await db.insert(users).values(user).returning();\n    return result[0];\n  }\n\n  async getCoursesByUserId(userId: string): Promise<Course[]> {\n    return await db.select().from(courses).where(eq(courses.userId, userId));\n  }\n\n  async createCourse(course: InsertCourse): Promise<Course> {\n    const result = await db.insert(courses).values(course).returning();\n    return result[0];\n  }\n\n  async deleteCourse(id: string): Promise<void> {\n    await db.delete(courses).where(eq(courses.id, id));\n  }\n\n  async getScheduleByUserId(userId: string): Promise<Schedule[]> {\n    return await db.select().from(schedule).where(eq(schedule.userId, userId));\n  }\n\n  async getScheduleByDay(userId: string, dayOfWeek: number): Promise<Schedule[]> {\n    return await db.select().from(schedule)\n      .where(and(\n        eq(schedule.userId, userId),\n        eq(schedule.dayOfWeek, dayOfWeek)\n      ));\n  }\n\n  async createScheduleItem(scheduleItem: InsertSchedule): Promise<Schedule> {\n    const result = await db.insert(schedule).values(scheduleItem).returning();\n    return result[0];\n  }\n\n  async deleteScheduleItem(id: string): Promise<void> {\n    await db.delete(schedule).where(eq(schedule.id, id));\n  }\n\n  async getTasksByUserId(userId: string): Promise<Task[]> {\n    return await db.select().from(tasks)\n      .where(eq(tasks.userId, userId))\n      .orderBy(desc(tasks.priority), tasks.dueAt);\n  }\n\n  async getTodayTasks(userId: string): Promise<Task[]> {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n\n    return await db.select().from(tasks)\n      .where(and(\n        eq(tasks.userId, userId),\n        gte(tasks.dueAt, today),\n        lte(tasks.dueAt, tomorrow)\n      ))\n      .orderBy(desc(tasks.priority));\n  }\n\n  async getTasksByDateRange(userId: string, startDate: Date, endDate: Date): Promise<Task[]> {\n    const taskResults = await db.select().from(tasks)\n      .where(and(\n        eq(tasks.userId, userId),\n        gte(tasks.dueAt, startDate),\n        lte(tasks.dueAt, endDate)\n      ))\n      .orderBy(desc(tasks.priority), tasks.dueAt);\n    \n    return taskResults;\n  }\n\n  async createTask(task: InsertTask): Promise<Task> {\n    const result = await db.insert(tasks).values(task).returning();\n    return result[0];\n  }\n\n  async deleteTask(id: string): Promise<void> {\n    await db.delete(tasks).where(eq(tasks.id, id));\n  }\n\n  async updateTaskStatus(id: string, status: string): Promise<void> {\n    await db.update(tasks)\n      .set({ status })\n      .where(eq(tasks.id, id));\n  }\n\n  async getLastSession(userId: string): Promise<Session | undefined> {\n    const result = await db.select().from(sessions)\n      .where(eq(sessions.userId, userId))\n      .orderBy(desc(sessions.happenedAt))\n      .limit(1);\n    return result[0];\n  }\n\n  async getTodaySession(userId: string): Promise<Session | undefined> {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n\n    const result = await db.select().from(sessions)\n      .where(and(\n        eq(sessions.userId, userId),\n        gte(sessions.happenedAt, today),\n        lte(sessions.happenedAt, tomorrow)\n      ))\n      .limit(1);\n    return result[0];\n  }\n\n  async createSession(session: InsertSession): Promise<Session> {\n    const result = await db.insert(sessions).values(session).returning();\n    return result[0];\n  }\n\n  async createMaterial(material: InsertMaterial): Promise<Material> {\n    const result = await db.insert(materials).values(material).returning();\n    return result[0];\n  }\n\n  async createQuizResult(result: InsertQuizResult): Promise<QuizResult> {\n    const queryResult = await db.insert(quizResults).values(result).returning();\n    return queryResult[0];\n  }\n\n  // Parent-Child Relationship methods\n  async createParentChildRelationship(relationship: InsertParentChildRelationship): Promise<ParentChildRelationship> {\n    const result = await db.insert(parentChildRelationships).values(relationship).returning();\n    return result[0];\n  }\n\n  async getChildrenByParentId(parentId: string): Promise<ParentChildRelationship[]> {\n    return await db.select().from(parentChildRelationships)\n      .where(eq(parentChildRelationships.parentId, parentId));\n  }\n\n  async findChildByEmail(childEmail: string): Promise<User | undefined> {\n    const result = await db.select().from(users)\n      .where(eq(users.email, childEmail));\n    return result[0];\n  }\n\n  async confirmRelationship(relationshipId: string): Promise<void> {\n    await db.update(parentChildRelationships)\n      .set({ isConfirmed: true })\n      .where(eq(parentChildRelationships.id, relationshipId));\n  }\n\n  async getPendingParentRequests(childId: string): Promise<ParentChildRelationship[]> {\n    return await db.select().from(parentChildRelationships)\n      .where(and(\n        eq(parentChildRelationships.childId, childId),\n        eq(parentChildRelationships.isConfirmed, false)\n      ));\n  }\n\n  // Calendar Integration methods\n  async getCalendarIntegration(userId: string): Promise<CalendarIntegration | undefined> {\n    const result = await db.select().from(calendarIntegrations)\n      .where(eq(calendarIntegrations.userId, userId));\n    return result[0];\n  }\n\n  async createCalendarIntegration(integration: InsertCalendarIntegration): Promise<CalendarIntegration> {\n    const result = await db.insert(calendarIntegrations).values(integration).returning();\n    return result[0];\n  }\n\n  async updateCalendarIntegration(userId: string, updates: Partial<CalendarIntegration>): Promise<void> {\n    await db.update(calendarIntegrations)\n      .set(updates)\n      .where(eq(calendarIntegrations.userId, userId));\n  }\n\n  async deleteCalendarIntegration(userId: string): Promise<void> {\n    await db.delete(calendarIntegrations)\n      .where(eq(calendarIntegrations.userId, userId));\n  }\n\n  // Imported Events methods\n  async getImportedEvent(userId: string, externalId: string): Promise<ImportedEvent | undefined> {\n    const result = await db.select().from(importedEvents)\n      .where(and(\n        eq(importedEvents.userId, userId),\n        eq(importedEvents.externalId, externalId)\n      ));\n    return result[0];\n  }\n\n  async createImportedEvent(event: InsertImportedEvent): Promise<ImportedEvent> {\n    const result = await db.insert(importedEvents).values(event).returning();\n    return result[0];\n  }\n\n  async getImportedEventsByUserId(userId: string): Promise<ImportedEvent[]> {\n    return await db.select().from(importedEvents)\n      .where(eq(importedEvents.userId, userId));\n  }\n}\n\nexport const storage = new PostgresStorage();\n","size_bytes":10354},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, uuid, time, date, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: uuid(\"id\").primaryKey(), // Allow external UUIDs from Supabase auth\n  email: text(\"email\").notNull().unique(),\n  name: text(\"name\").notNull(),\n  role: text(\"role\", { enum: [\"student\", \"parent\"] }).notNull(),\n  // Student-specific fields\n  educationLevel: text(\"education_level\", { enum: [\"vmbo\", \"havo\", \"vwo\", \"mbo\"] }), // null for parents\n  grade: integer(\"grade\"), // 1-6 for all levels, null for parents\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).default(sql`now()`),\n});\n\nexport const courses = pgTable(\"courses\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").references(() => users.id).notNull(),\n  name: text(\"name\").notNull(),\n  level: text(\"level\").default(\"havo5\"),\n});\n\nexport const schedule = pgTable(\"schedule\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").references(() => users.id).notNull(),\n  courseId: uuid(\"course_id\").references(() => courses.id),\n  dayOfWeek: integer(\"day_of_week\"), // 1=ma, 7=zo\n  startTime: time(\"start_time\"),\n  endTime: time(\"end_time\"),\n  kind: text(\"kind\", { enum: [\"les\", \"toets\", \"sport\", \"werk\", \"afspraak\", \"hobby\", \"anders\"] }).default(\"les\"),\n  title: text(\"title\"),\n  date: date(\"date\"), // for one-off tests\n  isRecurring: boolean(\"is_recurring\").default(false), // true for weekly recurring items, false for one-time events\n});\n\nexport const tasks = pgTable(\"tasks\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").references(() => users.id).notNull(),\n  courseId: uuid(\"course_id\").references(() => courses.id),\n  title: text(\"title\").notNull(),\n  dueAt: timestamp(\"due_at\", { withTimezone: true }),\n  estMinutes: integer(\"est_minutes\"),\n  priority: integer(\"priority\").default(0),\n  status: text(\"status\").default(\"todo\"),\n  source: text(\"source\"), // 'check-in' | 'manual'\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).default(sql`now()`),\n});\n\nexport const sessions = pgTable(\"sessions\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").references(() => users.id).notNull(),\n  happenedAt: timestamp(\"happened_at\", { withTimezone: true }).default(sql`now()`),\n  transcript: text(\"transcript\"),\n  summary: text(\"summary\"),\n  coachText: text(\"coach_text\"),\n});\n\nexport const materials = pgTable(\"materials\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").references(() => users.id).notNull(),\n  courseId: uuid(\"course_id\").references(() => courses.id),\n  title: text(\"title\"),\n  chapter: text(\"chapter\"),\n  paragraph: text(\"paragraph\"),\n  textContent: text(\"text_content\"), // OCR result\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).default(sql`now()`),\n});\n\nexport const quizResults = pgTable(\"quiz_results\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").references(() => users.id).notNull(),\n  courseId: uuid(\"course_id\").references(() => courses.id),\n  materialId: uuid(\"material_id\").references(() => materials.id),\n  score: integer(\"score\"),\n  weakPoints: text(\"weak_points\"),\n});\n\nexport const parentChildRelationships = pgTable(\"parent_child_relationships\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  parentId: uuid(\"parent_id\").references(() => users.id).notNull(),\n  childId: uuid(\"child_id\").references(() => users.id).notNull(),\n  childEmail: text(\"child_email\").notNull(), // For lookup during setup\n  childName: text(\"child_name\").notNull(), // For display in parent dashboard\n  isConfirmed: boolean(\"is_confirmed\").default(false), // Child can confirm/deny\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).default(sql`now()`),\n});\n\nexport const calendarIntegrations = pgTable(\"calendar_integrations\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").references(() => users.id).notNull().unique(),\n  provider: text(\"provider\", { enum: [\"google\"] }).notNull(),\n  accessToken: text(\"access_token\"),\n  refreshToken: text(\"refresh_token\"),\n  tokenExpires: timestamp(\"token_expires\", { withTimezone: true }),\n  calendarId: text(\"calendar_id\"), // primary calendar ID to sync\n  lastSyncAt: timestamp(\"last_sync_at\", { withTimezone: true }),\n  syncEnabled: boolean(\"sync_enabled\").default(true),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).default(sql`now()`),\n});\n\nexport const importedEvents = pgTable(\"imported_events\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").references(() => users.id).notNull(),\n  scheduleId: uuid(\"schedule_id\").references(() => schedule.id).notNull(),\n  externalId: text(\"external_id\").notNull(), // Google Calendar event ID\n  provider: text(\"provider\", { enum: [\"google\"] }).notNull(),\n  lastModified: timestamp(\"last_modified\", { withTimezone: true }),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).default(sql`now()`),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  createdAt: true,\n}); // Allow id to be provided (for Supabase auth sync)\n\nexport const insertCourseSchema = createInsertSchema(courses).omit({\n  id: true,\n});\n\nexport const insertScheduleSchema = createInsertSchema(schedule).omit({\n  id: true,\n});\n\nexport const insertTaskSchema = createInsertSchema(tasks).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSessionSchema = createInsertSchema(sessions).omit({\n  id: true,\n  happenedAt: true,\n});\n\nexport const insertMaterialSchema = createInsertSchema(materials).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertQuizResultSchema = createInsertSchema(quizResults).omit({\n  id: true,\n});\n\nexport const insertParentChildRelationshipSchema = createInsertSchema(parentChildRelationships).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCalendarIntegrationSchema = createInsertSchema(calendarIntegrations).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertImportedEventSchema = createInsertSchema(importedEvents).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Course = typeof courses.$inferSelect;\nexport type InsertCourse = z.infer<typeof insertCourseSchema>;\nexport type Schedule = typeof schedule.$inferSelect;\nexport type InsertSchedule = z.infer<typeof insertScheduleSchema>;\nexport type Task = typeof tasks.$inferSelect;\nexport type InsertTask = z.infer<typeof insertTaskSchema>;\nexport type Session = typeof sessions.$inferSelect;\nexport type InsertSession = z.infer<typeof insertSessionSchema>;\nexport type Material = typeof materials.$inferSelect;\nexport type InsertMaterial = z.infer<typeof insertMaterialSchema>;\nexport type QuizResult = typeof quizResults.$inferSelect;\nexport type InsertQuizResult = z.infer<typeof insertQuizResultSchema>;\nexport type ParentChildRelationship = typeof parentChildRelationships.$inferSelect;\nexport type InsertParentChildRelationship = z.infer<typeof insertParentChildRelationshipSchema>;\nexport type CalendarIntegration = typeof calendarIntegrations.$inferSelect;\nexport type InsertCalendarIntegration = z.infer<typeof insertCalendarIntegrationSchema>;\nexport type ImportedEvent = typeof importedEvents.$inferSelect;\nexport type InsertImportedEvent = z.infer<typeof insertImportedEventSchema>;\n","size_bytes":7695},"client/public/sw.js":{"content":"const CACHE_NAME = 'huiswerkcoach-noukie-v1';\nconst urlsToCache = [\n  '/',\n  '/static/js/bundle.js',\n  '/static/css/main.css',\n  '/manifest.json'\n];\n\nself.addEventListener('install', function(event) {\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then(function(cache) {\n        return cache.addAll(urlsToCache);\n      })\n  );\n});\n\nself.addEventListener('fetch', function(event) {\n  event.respondWith(\n    caches.match(event.request)\n      .then(function(response) {\n        // Return cached version or fetch from network\n        return response || fetch(event.request);\n      }\n    )\n  );\n});\n\nself.addEventListener('activate', function(event) {\n  event.waitUntil(\n    caches.keys().then(function(cacheNames) {\n      return Promise.all(\n        cacheNames.map(function(cacheName) {\n          if (cacheName !== CACHE_NAME) {\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    })\n  );\n});\n","size_bytes":925},"client/src/App.tsx":{"content":"import * as React from \"react\";\nimport { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider, useAuth } from \"@/lib/auth\";\nimport Layout from \"@/components/Layout\";\nimport Login from \"@/pages/Login\";\nimport Vandaag from \"@/pages/Vandaag\";\nimport Planning from \"@/pages/Planning\";\nimport Rooster from \"@/pages/Rooster\";\nimport Help from \"@/pages/Help\";\nimport Instellingen from \"@/pages/Instellingen\";\nimport ParentDashboard from \"@/pages/ParentDashboard\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction AuthenticatedApp() {\n  const { user, loading } = useAuth();\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\" data-testid=\"loading-screen\">\n        <div className=\"animate-spin w-8 h-8 border-2 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  if (!user) {\n    return <Login />;\n  }\n\n  // Different interface for parents\n  if (user.user_metadata?.role === 'parent') {\n    return (\n      <Layout>\n        <Switch>\n          <Route path=\"/\" component={ParentDashboard} />\n          <Route component={NotFound} />\n        </Switch>\n      </Layout>\n    );\n  }\n\n  // Student interface (default)\n  return (\n    <Layout>\n      <Switch>\n        <Route path=\"/\" component={Vandaag} />\n        <Route path=\"/rooster\" component={Planning} />\n        <Route path=\"/toevoegen\" component={Rooster} />\n        <Route path=\"/help\" component={Help} />\n        <Route path=\"/instellingen\" component={Instellingen} />\n        <Route component={NotFound} />\n      </Switch>\n    </Layout>\n  );\n}\n\nfunction Router() {\n  return (\n    <AuthProvider>\n      <AuthenticatedApp />\n    </AuthProvider>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2122},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(217.2, 91.2%, 59.8%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(45.4, 93.4%, 47.5%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(217.2, 91.2%, 59.8%);\n  --radius: 0.75rem;\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --shadow-2xs: 0px 2px 0px 0px hsl(217.2, 91.2%, 59.8%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(217.2, 91.2%, 59.8%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(217.2, 91.2%, 59.8%, 0.00), 0px 1px 2px -1px hsl(217.2, 91.2%, 59.8%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(217.2, 91.2%, 59.8%, 0.00), 0px 1px 2px -1px hsl(217.2, 91.2%, 59.8%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(217.2, 91.2%, 59.8%, 0.00), 0px 2px 4px -1px hsl(217.2, 91.2%, 59.8%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(217.2, 91.2%, 59.8%, 0.00), 0px 4px 6px -1px hsl(217.2, 91.2%, 59.8%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(217.2, 91.2%, 59.8%, 0.00), 0px 8px 10px -1px hsl(217.2, 91.2%, 59.8%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(217.2, 91.2%, 59.8%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(217.2, 91.2%, 59.8%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(195, 15.3846%, 94.9020%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(45.4, 93.4%, 47.5%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(217.2, 91.2%, 59.8%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer components {\n  .voice-button {\n    background: linear-gradient(135deg, var(--primary) 0%, hsl(217.2, 91.2%, 45%) 100%);\n    box-shadow: 0 4px 20px hsla(217.2, 91.2%, 59.8%, 0.3);\n  }\n  \n  .voice-button:active {\n    transform: scale(0.95);\n    box-shadow: 0 2px 10px hsla(217.2, 91.2%, 59.8%, 0.4);\n  }\n  \n  .task-card {\n    transition: all 0.2s ease;\n  }\n  \n  .task-card:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 20px hsla(0, 0%, 0%, 0.1);\n  }\n  \n  .recording-pulse {\n    animation: pulse 2s infinite;\n  }\n  \n  @keyframes pulse {\n    0%, 100% { opacity: 1; }\n    50% { opacity: 0.7; }\n  }\n  \n  .tab-indicator {\n    position: absolute;\n    bottom: -1px;\n    left: 0;\n    right: 0;\n    height: 3px;\n    background: var(--primary);\n    border-radius: 2px 2px 0 0;\n  }\n}\n","size_bytes":3560},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/cron.ts":{"content":"import cron from \"node-cron\";\nimport { storage } from \"../storage\";\n\nconst REMINDER_HOUR = parseInt(process.env.APP_REMINDER_HOUR || \"16\", 10);\n\nexport function startDailyReminderCron() {\n  // Run daily at the specified hour\n  cron.schedule(`0 ${REMINDER_HOUR} * * *`, async () => {\n    console.log(\"Running daily reminder check...\");\n    await checkAndSendReminders();\n  });\n  \n  console.log(`Daily reminder cron started for ${REMINDER_HOUR}:00`);\n}\n\nexport async function checkAndSendReminders(): Promise<{ sent: number; skipped: number }> {\n  let sent = 0;\n  let skipped = 0;\n\n  try {\n    // Get all users with role 'student'\n    // Note: This would need to be implemented in storage interface\n    // const students = await storage.getStudentUsers();\n    \n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    // For now, return dummy response until user management is fully implemented\n    console.log(\"Daily reminder check completed\");\n    \n    // In a real implementation:\n    // 1. Get all student users\n    // 2. For each student, check if they have a session today\n    // 3. If not, send reminder email\n    // 4. Track sent/skipped counts\n    \n    return { sent, skipped };\n    \n  } catch (error) {\n    console.error(\"Error in daily reminder check:\", error);\n    return { sent: 0, skipped: 0 };\n  }\n}\n\nexport async function sendReminderEmail(userEmail: string, userName: string): Promise<void> {\n  if (!process.env.EMAIL_PROVIDER_API_KEY) {\n    console.log(`Would send reminder email to ${userEmail} (${userName})`);\n    return;\n  }\n  \n  // Implement email sending with your preferred provider\n  // Example with SendGrid, Postmark, etc.\n  try {\n    const emailData = {\n      to: userEmail,\n      subject: \"Vergeet je huiswerk check-in niet - Huiswerkcoach Noukie\",\n      html: `\n        <h2>Hoi ${userName}!</h2>\n        <p>Je hebt vandaag nog geen check-in gedaan bij Huiswerkcoach Noukie.</p>\n        <p>Doe je dagelijkse check-in om je huiswerk planning bij te houden:</p>\n        <p><a href=\"${process.env.APP_URL || 'http://localhost:5000'}\" style=\"background: #3B82F6; color: white; padding: 12px 24px; text-decoration: none; border-radius: 8px;\">Doe Check-in</a></p>\n        <p>Tot snel!</p>\n        <p><em>Huiswerkcoach Noukie</em></p>\n      `,\n    };\n\n    // Example implementation - replace with your email service\n    console.log(`Sending reminder email to ${userEmail}`, emailData);\n    \n    // Actual email sending would go here\n    // await emailService.send(emailData);\n    \n  } catch (error) {\n    console.error(`Failed to send reminder email to ${userEmail}:`, error);\n  }\n}\n","size_bytes":2614},"server/services/openai.ts":{"content":"import OpenAI from \"openai\";\nimport fs from \"fs\";\n\n// the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\nconst openai = process.env.OPENAI_API_KEY ? new OpenAI({ apiKey: process.env.OPENAI_API_KEY }) : null;\n\nexport async function transcribeAudio(audioFilePath: string): Promise<{ text: string }> {\n  if (!openai) {\n    // Dummy response when no API key\n    return { text: \"Vandaag moet ik wiskunde opgaven 5-10 maken en biologie presentatie voorbereiden.\" };\n  }\n\n  const audioReadStream = fs.createReadStream(audioFilePath);\n\n  const transcription = await openai.audio.transcriptions.create({\n    file: audioReadStream,\n    model: \"whisper-1\",\n  });\n\n  return { text: transcription.text };\n}\n\nexport async function generatePlan(transcript: string, date: string): Promise<{\n  tasks: Array<{\n    title: string;\n    course: string;\n    due_at: string;\n    est_minutes: number;\n    priority: number;\n  }>;\n  coach_text: string;\n}> {\n  if (!openai) {\n    // Dummy response when no API key\n    return {\n      tasks: [\n        {\n          title: \"Wiskunde opgaven 5-10\",\n          course: \"Wiskunde A\",\n          due_at: new Date().toISOString(),\n          est_minutes: 40,\n          priority: 2\n        }\n      ],\n      coach_text: \"Vandaag pak je wiskunde opgaven 5-10. Neem je tijd en vraag hulp als je vastloopt.\"\n    };\n  }\n\n  const response = await openai.chat.completions.create({\n    model: \"gpt-4o\",\n    messages: [\n      {\n        role: \"system\",\n        content: \"Je bent een Nederlandse huiswerkcoach voor 5 havo. BELANGRIJKE REGEL: Maak ALLEEN taken die de leerling expliciet noemt. Verzin NIETS extra. Als de input vaag is, vraag om verduidelijking. Maak concrete taken (Titel, Vak, Deadline, Tijdinschatting) ALLEEN van wat letterlijk wordt genoemd. Formatteer in JSON.\"\n      },\n      {\n        role: \"user\",\n        content: `Transcript: ${transcript}\\nDatum: ${date}\\n\\nMAAK ALLEEN TAKEN DIE EXPLICIET GENOEMD WORDEN. Verzin niets extra. Als de input te vaag is, antwoord dan met lege tasks array en coach_text die om verduidelijking vraagt. JSON formaat verwacht.`\n      }\n    ],\n    response_format: { type: \"json_object\" },\n  });\n\n  return JSON.parse(response.choices[0].message.content || \"{}\");\n}\n\nexport async function generateExplanation(\n  mode: \"text\" | \"image\",\n  text?: string,\n  ocrText?: string,\n  course?: string\n): Promise<{\n  steps: string[];\n  example: { prompt: string; solution: string };\n  quiz: { question: string; choices: string[]; answer: string };\n  coach_text: string;\n  resources: { title: string; url: string }[];\n}> {\n  if (!openai) {\n    // Dummy response when no API key\n    return {\n      steps: [\n        \"Identificeer de rechthoekige driehoek met de gegeven hoek\",\n        \"Bepaal de overstaande zijde en de schuine zijde\",\n        \"Gebruik de formule: sin(hoek) = overstaande zijde / schuine zijde\"\n      ],\n      example: {\n        prompt: \"Gegeven: driehoek ABC met hoek A = 30¬∞, overstaande zijde = 5 cm, schuine zijde = 10 cm\",\n        solution: \"sin(30¬∞) = 5/10 = 0.5\"\n      },\n      quiz: {\n        question: \"Wat is sin(60¬∞) in een driehoek waar de overstaande zijde 8 cm is en de schuine zijde 10 cm?\",\n        choices: [\"A) 0.6\", \"B) 0.8\", \"C) 1.25\"],\n        answer: \"B\"\n      },\n      coach_text: \"Probeer eerst stap 1 en 2. Zeg 'help' als je vastloopt.\",\n      resources: [\n        {\n          title: \"Khan Academy NL - Trigonometrie\",\n          url: \"https://nl.khanacademy.org/math/trigonometry\"\n        },\n        {\n          title: \"Wiskunde Online - Sinus en Cosinus\",\n          url: \"https://www.wiskundeonline.nl/sinus-cosinus\"\n        }\n      ]\n    };\n  }\n\n  const content = text || ocrText || \"Algemene uitleg\";\n  const subject = course || \"algemeen\";\n\n  const response = await openai.chat.completions.create({\n    model: \"gpt-4o\",\n    messages: [\n      {\n        role: \"system\",\n        content: \"Je bent een Nederlandse huiswerkcoach voor 5 havo. BELANGRIJK: Geef alleen correcte, geverifieerde informatie. Als je iets niet zeker weet, zeg dan expliciet 'Hier ben ik niet zeker van' of 'Dit moet je nakijken bij je docent'. Verzin nooit feiten, formules of antwoorden. Voor 'Ik snap dit niet': geef 3‚Äì6 genummerde uitlegstappen, 1 uitgewerkt voorbeeld, 1 controlevraag met meerkeuze opties, en 2-3 nuttige links. Gebruik alleen echte, bestaande websites in je bronnen. Gebruik exact deze JSON structuur: {\\\"steps\\\": [\\\"stap1\\\", \\\"stap2\\\"], \\\"example\\\": {\\\"prompt\\\": \\\"opgave\\\", \\\"solution\\\": \\\"antwoord\\\"}, \\\"quiz\\\": {\\\"question\\\": \\\"vraag\\\", \\\"choices\\\": [\\\"A) optie1\\\", \\\"B) optie2\\\", \\\"C) optie3\\\"], \\\"answer\\\": \\\"A\\\"}, \\\"coach_text\\\": \\\"moedigend advies\\\", \\\"resources\\\": [{\\\"title\\\": \\\"Khan Academy NL\\\", \\\"url\\\": \\\"https://nl.khanacademy.org/...\\\"}]}\"\n      },\n      {\n        role: \"user\",\n        content: `Onderwerp: ${content}\\nVak: ${subject}\\n\\nLET OP: Geef alleen correcte informatie die je zeker weet. Als je twijfelt, vermeld dit expliciet. Verzin geen feiten, formules of URLs.\\n\\nGeef uitleg met exact deze JSON structuur: {\\\"steps\\\": [\\\"stap1\\\", \\\"stap2\\\"], \\\"example\\\": {\\\"prompt\\\": \\\"opgave\\\", \\\"solution\\\": \\\"antwoord\\\"}, \\\"quiz\\\": {\\\"question\\\": \\\"vraag\\\", \\\"choices\\\": [\\\"A) optie1\\\", \\\"B) optie2\\\", \\\"C) optie3\\\"], \\\"answer\\\": \\\"A\\\"}, \\\"coach_text\\\": \\\"moedigend advies\\\", \\\"resources\\\": [{\\\"title\\\": \\\"Website naam\\\", \\\"url\\\": \\\"https://echte-url.nl\\\"}]}. \\n\\nGebruik alleen echte Nederlandse onderwijswebsites zoals Khan Academy NL, Malmberg, ThiemeMeulenhoff, Noordhoff, of Wikipedia. Controleer dat de URLs bestaan - geef algemene domeinnamen zoals \"https://nl.khanacademy.org\" zonder specifieke paden als je onzeker bent.`\n      }\n    ],\n    response_format: { type: \"json_object\" },\n  });\n\n  const rawResponse = JSON.parse(response.choices[0].message.content || \"{}\");\n  console.log(\"Raw OpenAI response:\", JSON.stringify(rawResponse, null, 2));\n  \n  // Normalize the response to expected format\n  let steps = [\"Geen stappen beschikbaar\"];\n  if (rawResponse.steps) {\n    steps = rawResponse.steps;\n  } else if (rawResponse.uitleg_stappen) {\n    // Handle both array of strings and array of objects\n    steps = rawResponse.uitleg_stappen.map((s: any) => {\n      if (typeof s === 'string') return s;\n      return s.stap ? `${s.stap}. ${s.beschrijving || s.omschrijving || s.uitleg}` : (s.beschrijving || s.omschrijving || s.uitleg || s);\n    });\n  } else if (rawResponse.stappenUitleg) {\n    steps = rawResponse.stappenUitleg.map((s: any) => s.omschrijving || s.uitleg || s.beschrijving || `Stap ${s.stap}: ${s.omschrijving || s.beschrijving}`);\n  } else if (rawResponse.stappen) {\n    steps = rawResponse.stappen.map((s: any) => s.uitleg || s.omschrijving || s.beschrijving || s);\n  }\n\n  let example = { prompt: \"Geen voorbeeld beschikbaar\", solution: \"Geen oplossing beschikbaar\" };\n  if (rawResponse.example) {\n    example = rawResponse.example;\n  } else if (rawResponse.voorbeeld) {\n    const v = rawResponse.voorbeeld;\n    example = {\n      prompt: v.omschrijving || v.opgave || \"Geen voorbeeld beschikbaar\",\n      solution: v.resultaat || v.oplossing || (v.berekening ? v.berekening.join('; ') : \"Geen oplossing beschikbaar\")\n    };\n  }\n\n  let quiz = { question: \"Geen vraag beschikbaar\", choices: [\"A) Optie niet beschikbaar\"], answer: \"A\" };\n  if (rawResponse.quiz) {\n    quiz = rawResponse.quiz;\n  } else if (rawResponse.controlevraag) {\n    const c = rawResponse.controlevraag;\n    const choices = [];\n    if (c.opties) {\n      // Convert object {A: \"...\", B: \"...\"} to array [\"A) ...\", \"B) ...\"]\n      for (const [key, value] of Object.entries(c.opties)) {\n        choices.push(`${key}) ${value}`);\n      }\n    }\n    quiz = {\n      question: c.vraag || \"Geen vraag beschikbaar\",\n      choices: choices.length > 0 ? choices : [\"A) Optie niet beschikbaar\"],\n      answer: c.correcteAntwoord || c.antwoord || \"A\"\n    };\n  }\n\n  let resources = [\n    { title: \"Khan Academy NL\", url: \"https://nl.khanacademy.org\" },\n    { title: \"Studiewijzer.nl\", url: \"https://www.studiewijzer.nl\" }\n  ];\n  if (rawResponse.resources && Array.isArray(rawResponse.resources)) {\n    resources = rawResponse.resources.filter((r: any) => r.title && r.url);\n  } else if (rawResponse.bronnen && Array.isArray(rawResponse.bronnen)) {\n    resources = rawResponse.bronnen.map((b: any) => ({\n      title: b.naam || b.title || \"Nuttige bron\",\n      url: b.link || b.url || \"#\"\n    }));\n  }\n\n  const result = {\n    steps,\n    example,\n    quiz,\n    coach_text: rawResponse.coach_text || rawResponse.advies || rawResponse.feedback || \"Goed gedaan! Probeer de stappen te volgen.\",\n    resources\n  };\n  \n  console.log(\"Normalized result:\", JSON.stringify(result, null, 2));\n  return result;\n}\n\nexport async function expandExplanation(\n  originalExplanation: {\n    steps: string[];\n    example: { prompt: string; solution: string };\n    quiz: { question: string; choices: string[]; answer: string };\n    coach_text: string;\n    resources: { title: string; url: string }[];\n  },\n  topic: string,\n  course: string\n): Promise<{\n  steps: string[];\n  example: { prompt: string; solution: string };\n  quiz: { question: string; choices: string[]; answer: string };\n  coach_text: string;\n  resources: { title: string; url: string }[];\n}> {\n  if (!openai) {\n    // Dummy expanded response when no API key\n    return {\n      steps: [\n        ...originalExplanation.steps,\n        \"Extra stap: Verdiep je kennis door de formule uit je hoofd te leren\",\n        \"Extra stap: Oefen met verschillende voorbeelden tot je het automatisch kunt\",\n        \"Extra stap: Leg het concept uit aan iemand anders - dat helpt je het beter te begrijpen\"\n      ],\n      example: {\n        prompt: originalExplanation.example.prompt + \" (uitgebreid voorbeeld)\",\n        solution: originalExplanation.example.solution + \" - Met meer detail: dit komt omdat de formule gebaseerd is op de verhouding tussen zijden in een rechthoekige driehoek.\"\n      },\n      quiz: originalExplanation.quiz,\n      coach_text: \"Je wilt meer leren - dat is geweldig! Probeer de extra stappen en daag jezelf uit met moeilijkere opgaven.\",\n      resources: originalExplanation.resources\n    };\n  }\n\n  const response = await openai.chat.completions.create({\n    model: \"gpt-4o\",\n    messages: [\n      {\n        role: \"system\",\n        content: \"Je bent een Nederlandse huiswerkcoach voor 5 havo. BELANGRIJK: Geef alleen correcte, geverifieerde informatie. Als je iets niet zeker weet, vermeld dit expliciet. Verzin nooit feiten of formules. Een student vraagt om MEER UITLEG over een onderwerp. Geef een uitgebreidere versie met: meer gedetailleerde stappen (5-8 stappen), uitgebreider voorbeeld met extra toelichting, nieuwe quiz vraag (iets moeilijker), en aanmoedigende coach tekst. Gebruik dezelfde JSON structuur maar met meer diepgang en detail.\"\n      },\n      {\n        role: \"user\", \n        content: `De student wil meer uitleg over: ${topic} (vak: ${course})\n\nHuidige uitleg die ze al hebben:\nStappen: ${originalExplanation.steps.join('; ')}\nVoorbeeld: ${originalExplanation.example.prompt} ‚Üí ${originalExplanation.example.solution}\n\nGeef een UITGEBREIDERE versie met:\n- Meer gedetailleerde stappen (5-8 stappen met extra toelichting)\n- Uitgebreider voorbeeld met meer stappen en uitleg\n- Nieuwe, iets moeilijkere quiz vraag\n- Motiverende coach tekst\n- Zelfde nuttige links\n\nJSON structuur: {\"steps\": [\"gedetailleerde stap1\", \"stap2\"], \"example\": {\"prompt\": \"complexer voorbeeld\", \"solution\": \"uitgebreide oplossing\"}, \"quiz\": {\"question\": \"vraag\", \"choices\": [\"A) optie1\", \"B) optie2\", \"C) optie3\"], \"answer\": \"A\"}, \"coach_text\": \"motiverende tekst\", \"resources\": [{\"title\": \"titel\", \"url\": \"url\"}]}`\n      }\n    ],\n    response_format: { type: \"json_object\" },\n  });\n\n  const rawResponse = JSON.parse(response.choices[0].message.content || \"{}\");\n  console.log(\"Expanded explanation response:\", JSON.stringify(rawResponse, null, 2));\n  \n  // Use same normalization logic\n  let steps = [\"Geen uitgebreide stappen beschikbaar\"];\n  if (rawResponse.steps) {\n    steps = rawResponse.steps;\n  } else if (rawResponse.uitleg_stappen) {\n    steps = rawResponse.uitleg_stappen.map((s: any) => {\n      if (typeof s === 'string') return s;\n      return s.stap ? `${s.stap}. ${s.beschrijving || s.omschrijving || s.uitleg}` : (s.beschrijving || s.omschrijving || s.uitleg || s);\n    });\n  }\n\n  let example = { prompt: \"Geen uitgebreid voorbeeld beschikbaar\", solution: \"Geen uitgebreide oplossing beschikbaar\" };\n  if (rawResponse.example) {\n    example = rawResponse.example;\n  } else if (rawResponse.voorbeeld) {\n    const v = rawResponse.voorbeeld;\n    example = {\n      prompt: v.omschrijving || v.opgave || \"Geen uitgebreid voorbeeld beschikbaar\",\n      solution: v.resultaat || v.oplossing || (v.berekening ? v.berekening.join('; ') : \"Geen uitgebreide oplossing beschikbaar\")\n    };\n  }\n\n  let quiz = { question: \"Geen uitgebreide vraag beschikbaar\", choices: [\"A) Optie niet beschikbaar\"], answer: \"A\" };\n  if (rawResponse.quiz) {\n    quiz = rawResponse.quiz;\n  } else if (rawResponse.controlevraag) {\n    const c = rawResponse.controlevraag;\n    const choices = [];\n    if (c.opties) {\n      for (const [key, value] of Object.entries(c.opties)) {\n        choices.push(`${key}) ${value}`);\n      }\n    }\n    quiz = {\n      question: c.vraag || \"Geen uitgebreide vraag beschikbaar\",\n      choices: choices.length > 0 ? choices : [\"A) Optie niet beschikbaar\"],\n      answer: c.correcteAntwoord || c.antwoord || \"A\"\n    };\n  }\n\n  let resources = originalExplanation.resources;\n  if (rawResponse.resources && Array.isArray(rawResponse.resources)) {\n    resources = rawResponse.resources.filter((r: any) => r.title && r.url);\n  }\n\n  return {\n    steps,\n    example,\n    quiz,\n    coach_text: rawResponse.coach_text || rawResponse.advies || rawResponse.feedback || \"Geweldig dat je meer wilt leren! Blijf oefenen met deze uitgebreide stappen.\",\n    resources\n  };\n}\n","size_bytes":13971},"server/services/supabase.ts":{"content":"import { createClient } from \"@supabase/supabase-js\";\n\nconst supabaseUrl = process.env.SUPABASE_URL;\nconst supabaseAnonKey = process.env.SUPABASE_ANON_KEY;\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error(\"Missing Supabase environment variables\");\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n\nexport async function getUserFromToken(token: string) {\n  const { data: { user }, error } = await supabase.auth.getUser(token);\n  if (error) throw error;\n  return user;\n}\n\nexport async function signIn(email: string, password: string) {\n  const { data, error } = await supabase.auth.signInWithPassword({\n    email,\n    password,\n  });\n  if (error) throw error;\n  return data;\n}\n\nexport async function signUp(email: string, password: string, name: string, role: \"student\" | \"parent\") {\n  const { data, error } = await supabase.auth.signUp({\n    email,\n    password,\n    options: {\n      data: {\n        name,\n        role,\n      }\n    }\n  });\n  if (error) throw error;\n  return data;\n}\n\nexport async function signOut() {\n  const { error } = await supabase.auth.signOut();\n  if (error) throw error;\n}\n","size_bytes":1128},"client/src/components/HelpModal.tsx":{"content":"import * as React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport { Camera, Upload, Play, Volume2, ExternalLink } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAudio } from \"@/hooks/use-audio\";\nimport type { Task, Course } from \"@shared/schema\";\n\ninterface HelpModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  task?: Task;\n  course?: Course;\n  helpData?: {\n    mode: string;\n    text?: string;\n    course?: string;\n    file?: File;\n  };\n}\n\ninterface ExplanationResult {\n  steps: string[];\n  example: { prompt: string; solution: string };\n  quiz: { question: string; choices: string[]; answer: string };\n  coach_text: string;\n  resources: { title: string; url: string }[];\n}\n\nexport default function HelpModal({ open, onOpenChange, task, course, helpData }: HelpModalProps) {\n  const { toast } = useToast();\n  const { playAudio } = useAudio();\n  const [textInput, setTextInput] = useState(helpData?.text || \"\");\n  const [selectedCourse, setSelectedCourse] = useState(helpData?.course || course?.name || \"\");\n  const [explanation, setExplanation] = useState<ExplanationResult | null>(null);\n  const [selectedAnswer, setSelectedAnswer] = useState(\"\");\n  const [currentTopic, setCurrentTopic] = useState(\"\");\n\n  const courses = [\"Wiskunde A\", \"Biologie\", \"Economie\", \"Nederlands\"];\n\n  // Auto-start help request when helpData is provided\n  useEffect(() => {\n    if (helpData && open && !explanation) {\n      if (helpData.mode === \"text\" && helpData.text) {\n        helpMutation.mutate({\n          mode: \"text\",\n          text: helpData.text,\n          course: helpData.course,\n        });\n      }\n    }\n  }, [helpData, open, explanation]);\n\n  // Reset explanation when modal closes\n  useEffect(() => {\n    if (!open) {\n      setExplanation(null);\n      setSelectedAnswer(\"\");\n    }\n  }, [open]);\n\n  const helpMutation = useMutation({\n    mutationFn: async (data: { mode: string; text?: string; course?: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/explain\", data);\n      return await response.json();\n    },\n    onSuccess: (data: ExplanationResult) => {\n      setExplanation(data);\n      \n      // If no currentTopic is set (edge case), use the first step as topic\n      if (!currentTopic && data.steps.length > 0) {\n        setCurrentTopic(data.steps[0].substring(0, 50)); // First 50 chars of first step\n      }\n      \n      // Play coach audio\n      if (data.coach_text) {\n        playTTSAudio(data.coach_text);\n      }\n    },\n    onError: (error) => {\n      console.error(\"Help error:\", error);\n      toast({\n        title: \"Fout bij uitleg\",\n        description: \"Probeer het opnieuw.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const ttsAudioMutation = useMutation({\n    mutationFn: async (text: string) => {\n      const response = await apiRequest(\"POST\", \"/api/tts\", { text });\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      if (data.audioUrl) {\n        playAudio(data.audioUrl);\n      }\n    }\n  });\n\n  const playTTSAudio = (text: string) => {\n    if (text && text.trim()) {\n      ttsAudioMutation.mutate(text);\n    }\n  };\n\n  // Expand explanation mutation\n  const expandMutation = useMutation({\n    mutationFn: async () => {\n      if (!explanation || !currentTopic || !selectedCourse) {\n        throw new Error(\"Missing data for expansion\");\n      }\n      \n      console.log(\"Sending expand request:\", { \n        topic: currentTopic, \n        course: selectedCourse,\n        hasExplanation: !!explanation \n      });\n      \n      const response = await apiRequest(\"POST\", \"/api/explain/expand\", {\n        originalExplanation: explanation,\n        topic: currentTopic,\n        course: selectedCourse\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.text();\n        console.error(\"Expand API error:\", errorData);\n        throw new Error(`Server error: ${response.status}`);\n      }\n      \n      return await response.json();\n    },\n    onSuccess: (data: ExplanationResult) => {\n      setExplanation(data);\n      setSelectedAnswer(\"\"); // Reset quiz answer\n      \n      // Play new coach audio\n      if (data.coach_text) {\n        playTTSAudio(data.coach_text);\n      }\n      \n      toast({\n        title: \"Uitgebreide uitleg\",\n        description: \"Je hebt nu meer gedetailleerde stappen en een moeilijkere vraag!\"\n      });\n    },\n    onError: (error) => {\n      console.error(\"Expand error:\", error);\n      toast({\n        title: \"Fout\",\n        description: \"Kon geen uitgebreide uitleg genereren. Probeer opnieuw.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleTextHelp = () => {\n    if (!textInput.trim()) {\n      toast({\n        title: \"Geen tekst\",\n        description: \"Typ eerst wat je niet snapt.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setCurrentTopic(textInput); // Store the topic for potential expansion\n    helpMutation.mutate({\n      mode: \"text\",\n      text: textInput,\n      course: selectedCourse,\n    });\n  };\n\n  const handleMoreExplanation = () => {\n    console.log(\"More explanation clicked:\", { explanation: !!explanation, currentTopic, selectedCourse });\n    if (explanation && currentTopic && selectedCourse) {\n      expandMutation.mutate();\n    } else {\n      console.log(\"Missing data for expansion:\", { \n        hasExplanation: !!explanation, \n        currentTopic, \n        selectedCourse \n      });\n      toast({\n        title: \"Fout\",\n        description: \"Kan geen uitgebreide uitleg genereren. Probeer eerst nieuwe hulp te vragen.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleFileUpload = (type: \"photo\" | \"pdf\") => {\n    const input = document.createElement(\"input\");\n    input.type = \"file\";\n    input.accept = type === \"photo\" ? \"image/*\" : \".pdf\";\n    \n    input.onchange = async (e) => {\n      const file = (e.target as HTMLInputElement).files?.[0];\n      if (!file) return;\n\n      const formData = new FormData();\n      formData.append(\"image\", file);\n\n      try {\n        const ocrResponse = await apiRequest(\"POST\", \"/api/ocr\", formData);\n        const { text } = await ocrResponse.json();\n\n        setCurrentTopic(text); // Store OCR text as topic for expansion\n        helpMutation.mutate({\n          mode: \"image\",\n          text,\n          course: selectedCourse,\n        });\n      } catch (error) {\n        console.error(\"OCR error:\", error);\n        toast({\n          title: \"Fout bij verwerken\",\n          description: \"Kon bestand niet verwerken.\",\n          variant: \"destructive\",\n        });\n      }\n    };\n\n    input.click();\n  };\n\n  const checkQuizAnswer = () => {\n    if (!explanation || !selectedAnswer) return;\n\n    const isCorrect = selectedAnswer === explanation.quiz.answer;\n    \n    toast({\n      title: isCorrect ? \"Goed gedaan!\" : \"Niet helemaal juist\",\n      description: isCorrect \n        ? \"Je hebt het goede antwoord gekozen.\" \n        : `Het juiste antwoord is ${explanation.quiz.answer}.`,\n      variant: isCorrect ? \"default\" : \"destructive\",\n    });\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-md mx-auto max-h-[90vh] overflow-y-auto\" data-testid=\"help-modal\">\n        <DialogHeader>\n          <DialogTitle>Ik snap dit niet</DialogTitle>\n          {explanation && (\n            <div className=\"bg-amber-50 border border-amber-200 rounded-md p-3 mt-2\">\n              <p className=\"text-sm text-amber-800\">\n                ‚ö†Ô∏è <strong>Verificatie aanbevolen:</strong> Controleer belangrijke informatie altijd met je schoolboek of vraag het na bij je docent.\n              </p>\n            </div>\n          )}\n        </DialogHeader>\n\n        {!explanation && !helpMutation.isPending ? (\n          <div className=\"space-y-6\">\n            {/* Upload Options */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              <Button\n                variant=\"outline\"\n                className=\"h-24 flex flex-col items-center justify-center space-y-2 border-dashed\"\n                onClick={() => handleFileUpload(\"photo\")}\n                data-testid=\"button-upload-photo\"\n              >\n                <Camera className=\"w-6 h-6\" />\n                <div className=\"text-center\">\n                  <p className=\"text-sm font-medium\">Foto maken</p>\n                  <p className=\"text-xs text-muted-foreground\">Van opgave of boek</p>\n                </div>\n              </Button>\n\n              <Button\n                variant=\"outline\"\n                className=\"h-24 flex flex-col items-center justify-center space-y-2 border-dashed\"\n                onClick={() => handleFileUpload(\"pdf\")}\n                data-testid=\"button-upload-pdf\"\n              >\n                <Upload className=\"w-6 h-6\" />\n                <div className=\"text-center\">\n                  <p className=\"text-sm font-medium\">PDF uploaden</p>\n                  <p className=\"text-xs text-muted-foreground\">Digitaal bestand</p>\n                </div>\n              </Button>\n            </div>\n\n            {/* Text Input */}\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">\n                  Of beschrijf wat je niet snapt\n                </label>\n                <Textarea\n                  value={textInput}\n                  onChange={(e) => setTextInput(e.target.value)}\n                  placeholder=\"Bijv. Ik snap niet hoe je de sinus van een hoek berekent...\"\n                  className=\"resize-none\"\n                  rows={3}\n                  data-testid=\"textarea-help-text\"\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <label className=\"block text-sm font-medium mb-1\">Vak</label>\n                  <Select value={selectedCourse} onValueChange={setSelectedCourse}>\n                    <SelectTrigger className=\"w-32\" data-testid=\"select-course\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {courses.map((courseName) => (\n                        <SelectItem key={courseName} value={courseName}>\n                          {courseName}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <Button\n                  onClick={handleTextHelp}\n                  disabled={helpMutation.isPending}\n                  data-testid=\"button-get-help\"\n                >\n                  {helpMutation.isPending ? \"Bezig...\" : \"Help krijgen\"}\n                </Button>\n              </div>\n            </div>\n          </div>\n        ) : helpMutation.isPending ? (\n          <div className=\"flex items-center justify-center py-8\">\n            <div className=\"animate-spin w-8 h-8 border-2 border-primary border-t-transparent rounded-full\" />\n            <span className=\"ml-3\">Bezig met uitleg genereren...</span>\n          </div>\n        ) : (\n          <div className=\"space-y-6\">\n            {/* Explanation Header */}\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"font-medium\">Uitleg: {task?.title || \"Algemene hulp\"}</h3>\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={() => playTTSAudio(explanation?.coach_text || '')}\n                disabled={ttsAudioMutation.isPending}\n                data-testid=\"button-play-explanation\"\n              >\n                <Volume2 className=\"w-4 h-4\" />\n              </Button>\n            </div>\n\n            {/* Steps */}\n            <div>\n              <h4 className=\"text-sm font-medium mb-2\">Stappen:</h4>\n              <ol className=\"space-y-2 text-sm\">\n                {explanation?.steps?.map((step, index) => (\n                  <li key={index} className=\"flex\" data-testid={`step-${index}`}>\n                    <span className=\"w-6 h-6 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-xs mr-3 flex-shrink-0\">\n                      {index + 1}\n                    </span>\n                    <span>{step}</span>\n                  </li>\n                ))}\n              </ol>\n            </div>\n\n            {/* Example */}\n            <div className=\"bg-muted/50 rounded-lg p-3\" data-testid=\"example-section\">\n              <h4 className=\"text-sm font-medium mb-2\">Voorbeeld:</h4>\n              <p className=\"text-sm mb-2\">{explanation?.example?.prompt || 'Geen voorbeeld beschikbaar'}</p>\n              <p className=\"text-sm font-mono bg-background px-2 py-1 rounded\">\n                {explanation?.example?.solution || 'Geen oplossing beschikbaar'}\n              </p>\n            </div>\n\n            {/* Quiz */}\n            <div className=\"border border-border rounded-lg p-3\" data-testid=\"quiz-section\">\n              <h4 className=\"text-sm font-medium mb-3\">Controle vraag:</h4>\n              <p className=\"text-sm mb-3\">{explanation?.quiz?.question || 'Geen vraag beschikbaar'}</p>\n              \n              <div className=\"space-y-2 mb-4\">\n                {explanation?.quiz?.choices?.map((choice, index) => (\n                  <label key={index} className=\"flex items-center space-x-2 text-sm cursor-pointer\">\n                    <input\n                      type=\"radio\"\n                      name=\"quiz-answer\"\n                      value={choice.charAt(0)}\n                      checked={selectedAnswer === choice.charAt(0)}\n                      onChange={(e) => setSelectedAnswer(e.target.value)}\n                      className=\"text-primary\"\n                      data-testid={`radio-answer-${choice.charAt(0)}`}\n                    />\n                    <span>{choice}</span>\n                  </label>\n                ))}\n              </div>\n\n              <div className=\"flex space-x-2\">\n                <Button\n                  className=\"flex-1\"\n                  onClick={checkQuizAnswer}\n                  disabled={!selectedAnswer}\n                  data-testid=\"button-check-answer\"\n                >\n                  Controleren\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  onClick={handleMoreExplanation}\n                  disabled={expandMutation.isPending}\n                  data-testid=\"button-more-explanation\"\n                >\n                  {expandMutation.isPending ? \"Bezig...\" : \"Meer uitleg\"}\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => onOpenChange(false)}\n                  data-testid=\"button-understood\"\n                >\n                  Snap ik nu\n                </Button>\n              </div>\n            </div>\n\n            {/* Nuttige Links */}\n            {explanation?.resources && explanation.resources.length > 0 && (\n              <div className=\"border-t pt-4\">\n                <h4 className=\"text-sm font-medium mb-3 flex items-center\">\n                  <ExternalLink className=\"w-4 h-4 mr-2\" />\n                  Meer leren:\n                </h4>\n                <div className=\"space-y-2\">\n                  {explanation.resources.map((resource, index) => (\n                    <a\n                      key={index}\n                      href={resource.url}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"flex items-center text-sm text-primary hover:text-primary/80 underline transition-colors\"\n                      data-testid={`resource-link-${index}`}\n                    >\n                      <ExternalLink className=\"w-3 h-3 mr-1 flex-shrink-0\" />\n                      {resource.title}\n                    </a>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":16403},"client/src/components/Layout.tsx":{"content":"import { Home, Calendar, Plus, HelpCircle, Settings } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/lib/auth\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface LayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function Layout({ children }: LayoutProps) {\n  const [location] = useLocation();\n  const { user, signOut } = useAuth();\n\n  const tabs = [\n    { id: \"vandaag\", label: \"Vandaag\", icon: Home, path: \"/\" },\n    { id: \"rooster\", label: \"Rooster\", icon: Calendar, path: \"/rooster\" },\n    { id: \"toevoegen\", label: \"Toevoegen\", icon: Plus, path: \"/toevoegen\" },\n    { id: \"help\", label: \"Uitleg\", icon: HelpCircle, path: \"/help\" },\n    { id: \"instellingen\", label: \"Instellingen\", icon: Settings, path: \"/instellingen\" },\n  ];\n\n  // No tabs for parents - they only have the dashboard\n  const isParent = user?.user_metadata?.role === \"parent\";\n\n  return (\n    <div className=\"max-w-md mx-auto bg-white shadow-xl min-h-screen relative\" data-testid=\"app-container\">\n      {/* Header */}\n      <header className=\"bg-primary text-primary-foreground p-4 sticky top-0 z-50\" data-testid=\"header\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"w-28 h-14 bg-white rounded-sm flex items-center justify-center p-1\">\n            <img \n              src=\"/noukie-logo.png\" \n              alt=\"Noukie Logo\" \n              className=\"w-full h-full object-contain\"\n            />\n          </div>\n          <div className=\"text-center flex-1 mx-4\">\n            <h1 className=\"text-lg font-semibold\">Hi {user?.user_metadata?.name || 'Anouk'}! üëã</h1>\n            <p className=\"text-sm text-primary-foreground/80\">\n              {user?.user_metadata?.role === \"parent\" ? \"Ouder dashboard\" : \"Klaar voor vandaag?\"}\n            </p>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => signOut()}\n            className=\"text-primary-foreground hover:bg-primary/20\"\n            data-testid=\"button-logout\"\n          >\n            <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1\" />\n            </svg>\n          </Button>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className={isParent ? \"pb-4\" : \"pb-20\"} data-testid=\"main-content\">\n        {children}\n      </main>\n\n      {/* Bottom Navigation - Only for students */}\n      {!isParent && (\n        <nav className=\"fixed bottom-0 left-1/2 transform -translate-x-1/2 w-full max-w-md bg-card border-t border-border\" data-testid=\"bottom-navigation\">\n          <div className=\"grid grid-cols-5 gap-0\">\n            {tabs.map((tab) => {\n              const Icon = tab.icon;\n              const isActive = location === tab.path;\n              \n              return (\n                <Link key={tab.id} href={tab.path}>\n                  <div className=\"w-full flex justify-center\">\n                    <button\n                      className={`relative flex flex-col items-center justify-center py-3 px-2 transition-colors ${\n                        isActive ? \"text-primary\" : \"text-muted-foreground\"\n                      }`}\n                      data-testid={`tab-${tab.id}`}\n                    >\n                      <Icon className=\"w-5 h-5 mb-1\" />\n                      <span className=\"text-xs font-medium\">{tab.label}</span>\n                      {isActive && (\n                        <div className=\"tab-indicator\" />\n                      )}\n                    </button>\n                  </div>\n                </Link>\n              );\n            })}\n          </div>\n        </nav>\n      )}\n    </div>\n  );\n}\n","size_bytes":3855},"client/src/components/TaskCard.tsx":{"content":"import * as React from \"react\";\nimport { useState } from \"react\";\nimport { HelpCircle, Check, Trash2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport HelpModal from \"@/components/HelpModal\";\nimport type { Task, Course } from \"@shared/schema\";\n\ninterface TaskCardProps {\n  task: Task;\n  course?: Course;\n}\n\nexport default function TaskCard({ task, course }: TaskCardProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showHelpModal, setShowHelpModal] = useState(false);\n  const isCompleted = task.status === \"done\";\n\n  const toggleStatusMutation = useMutation({\n    mutationFn: async () => {\n      const newStatus = isCompleted ? \"todo\" : \"done\";\n      await apiRequest(\"PATCH\", `/api/tasks/${task.id}/status`, { status: newStatus });\n      return newStatus;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/tasks'] });\n      toast({\n        title: isCompleted ? \"Taak heropend\" : \"Taak voltooid!\",\n        description: isCompleted ? \"Je kunt weer aan deze taak werken.\" : \"Goed gedaan!\",\n      });\n    },\n    onError: (error) => {\n      console.error(\"Task status update error:\", error);\n      toast({\n        title: \"Fout\",\n        description: \"Kon taakstatus niet bijwerken.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const deleteTaskMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"DELETE\", `/api/tasks/${task.id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/tasks'] });\n      toast({\n        title: \"Taak verwijderd\",\n        description: \"De voltooide taak is verwijderd.\",\n      });\n    },\n    onError: (error) => {\n      console.error(\"Task delete error:\", error);\n      toast({\n        title: \"Fout bij verwijderen\",\n        description: \"Kon taak niet verwijderen. Probeer opnieuw.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const getPriorityLabel = (priority: number) => {\n    if (priority >= 2) return \"Hoge prioriteit\";\n    if (priority >= 1) return \"Normale prioriteit\";\n    return \"\";\n  };\n\n  const getPriorityColor = (priority: number) => {\n    if (priority >= 2) return \"text-destructive\";\n    if (priority >= 1) return \"text-accent\";\n    return \"text-muted-foreground\";\n  };\n\n  return (\n    <>\n      <div className={`task-card bg-card border border-border rounded-lg p-4 ${isCompleted ? 'opacity-70' : ''}`} data-testid={`task-card-${task.id}`}>\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex-1\">\n            <div className=\"flex items-center space-x-2 mb-2\">\n              <span className=\"text-xs font-medium text-primary bg-primary/10 px-2 py-1 rounded\">\n                {course?.name || \"Algemeen\"}\n              </span>\n              {task.priority && task.priority > 0 && (\n                <span className={`text-xs font-medium ${getPriorityColor(task.priority)}`}>\n                  {getPriorityLabel(task.priority)}\n                </span>\n              )}\n            </div>\n            <h4 className={`font-medium mb-1 ${isCompleted ? 'line-through' : ''}`}>\n              {task.title}\n            </h4>\n            {task.estMinutes && (\n              <p className=\"text-sm text-muted-foreground\">¬± {task.estMinutes} minuten</p>\n            )}\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"text-muted-foreground hover:text-accent p-1\"\n              onClick={() => setShowHelpModal(true)}\n              data-testid={`button-help-${task.id}`}\n              title=\"Ik snap dit niet\"\n            >\n              <HelpCircle className=\"w-5 h-5\" />\n            </Button>\n            {isCompleted && (\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"text-muted-foreground hover:text-destructive p-1\"\n                onClick={() => deleteTaskMutation.mutate()}\n                disabled={deleteTaskMutation.isPending}\n                data-testid={`button-delete-${task.id}`}\n                title=\"Verwijder voltooide taak\"\n              >\n                <Trash2 className=\"w-4 h-4\" />\n              </Button>\n            )}\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              className={`w-6 h-6 border-2 rounded transition-colors ${\n                isCompleted \n                  ? 'border-primary bg-primary text-primary-foreground' \n                  : 'border-border hover:border-primary'\n              }`}\n              onClick={() => toggleStatusMutation.mutate()}\n              disabled={toggleStatusMutation.isPending}\n              data-testid={`button-toggle-${task.id}`}\n            >\n              {isCompleted && <Check className=\"w-3 h-3\" />}\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      <HelpModal\n        open={showHelpModal}\n        onOpenChange={setShowHelpModal}\n        task={task}\n        course={course}\n      />\n    </>\n  );\n}\n","size_bytes":5245},"client/src/components/VoiceRecorder.tsx":{"content":"import * as React from \"react\";\nimport { useState } from \"react\";\nimport { Mic, Square } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useVoiceRecorder } from \"@/hooks/use-voice-recorder\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/lib/auth\";\n\nexport default function VoiceRecorder() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [status, setStatus] = useState<string>(\"Tik om op te nemen\");\n  \n  const { isRecording, recordingTime, startRecording, stopRecording } = useVoiceRecorder({\n    maxDuration: 60,\n    onRecordingComplete: (audioBlob) => {\n      handleRecording(audioBlob);\n    },\n    onStatusChange: (newStatus) => {\n      setStatus(newStatus);\n    }\n  });\n\n  const planMutation = useMutation({\n    mutationFn: async (audioBlob: Blob) => {\n      // First, transcribe the audio\n      const formData = new FormData();\n      const fileExtension = audioBlob.type.includes('wav') ? 'wav' : \n                           audioBlob.type.includes('ogg') ? 'ogg' : \n                           audioBlob.type.includes('mp4') ? 'mp4' : 'webm';\n      formData.append(\"audio\", audioBlob, `recording.${fileExtension}`);\n      \n      const asrResponse = await apiRequest(\"POST\", \"/api/asr\", formData);\n      const { transcript } = await asrResponse.json();\n      \n      // Then, create a plan\n      const planResponse = await apiRequest(\"POST\", \"/api/plan\", {\n        transcript,\n        date: new Date().toISOString(),\n        userId: user?.id\n      });\n      \n      return await planResponse.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Check-in voltooid!\",\n        description: `${data.tasks.length} nieuwe taken aangemaakt.`,\n      });\n      \n      // Invalidate tasks cache\n      queryClient.invalidateQueries({ queryKey: ['/api/tasks'] });\n    },\n    onError: (error) => {\n      console.error(\"Planning error:\", error);\n      toast({\n        title: \"Fout bij verwerken\",\n        description: \"Probeer het opnieuw.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleRecording = (audioBlob: Blob) => {\n    planMutation.mutate(audioBlob);\n  };\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')} / 1:00`;\n  };\n\n  return (\n    <section className=\"p-6\" data-testid=\"voice-recorder\">\n      <div className=\"text-center\">\n        <h2 className=\"text-xl font-semibold mb-2\">Dagelijkse Check-in</h2>\n        <p className=\"text-muted-foreground mb-6\">Vertel me over je taken en huiswerk</p>\n        \n        <div className=\"relative\">\n          <Button\n            className={`voice-button w-20 h-20 rounded-full text-white font-semibold transition-all duration-200 relative overflow-hidden ${\n              isRecording ? 'recording-pulse' : ''\n            }`}\n            onClick={isRecording ? stopRecording : startRecording}\n            disabled={planMutation.isPending}\n            data-testid={isRecording ? \"button-stop-recording\" : \"button-start-recording\"}\n          >\n            {planMutation.isPending ? (\n              <div className=\"animate-spin w-8 h-8 border-2 border-white border-t-transparent rounded-full\" />\n            ) : isRecording ? (\n              <Square className=\"w-8 h-8\" />\n            ) : (\n              <Mic className=\"w-8 h-8\" />\n            )}\n          </Button>\n          \n          <div className=\"mt-3\">\n            <div className=\"text-sm text-muted-foreground\" data-testid=\"recording-time\">\n              {formatTime(recordingTime)}\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"mt-4 text-sm\" data-testid=\"recording-status\">\n          {planMutation.isPending ? (\n            <span className=\"text-primary\">Bezig met verwerken...</span>\n          ) : isRecording ? (\n            <span className=\"text-destructive\">Aan het opnemen...</span>\n          ) : recordingTime > 0 && !planMutation.isPending ? (\n            <span className=\"text-primary\">Opname voltooid</span>\n          ) : (\n            <span className=\"text-muted-foreground\">{status}</span>\n          )}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":4399},"client/src/hooks/use-audio.ts":{"content":"import { useState, useRef } from \"react\";\n\nexport function useAudio() {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const audioRef = useRef<HTMLAudioElement | null>(null);\n\n  const playAudio = async (url: string) => {\n    try {\n      // Don't play if no URL provided (dummy/disabled audio)\n      if (!url) {\n        console.log(\"No audio URL provided, skipping playback\");\n        return;\n      }\n\n      // Stop current audio if playing\n      if (audioRef.current) {\n        audioRef.current.pause();\n        audioRef.current = null;\n      }\n\n      // Create new audio element\n      const audio = new Audio(url);\n      audioRef.current = audio;\n\n      audio.addEventListener('loadstart', () => {\n        setIsPlaying(true);\n      });\n\n      audio.addEventListener('ended', () => {\n        setIsPlaying(false);\n        audioRef.current = null;\n      });\n\n      audio.addEventListener('error', (error) => {\n        console.error('Audio playback error:', error);\n        setIsPlaying(false);\n        audioRef.current = null;\n      });\n\n      await audio.play();\n    } catch (error) {\n      console.error('Failed to play audio:', error);\n      setIsPlaying(false);\n    }\n  };\n\n  const stopAudio = () => {\n    if (audioRef.current) {\n      audioRef.current.pause();\n      audioRef.current = null;\n      setIsPlaying(false);\n    }\n  };\n\n  return {\n    playAudio,\n    stopAudio,\n    isPlaying,\n  };\n}\n","size_bytes":1405},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-voice-recorder.ts":{"content":"import { useState, useRef, useCallback } from \"react\";\n\ninterface UseVoiceRecorderProps {\n  maxDuration?: number; // in seconds\n  onRecordingComplete?: (audioBlob: Blob) => void;\n  onStatusChange?: (status: string) => void;\n}\n\nexport function useVoiceRecorder({\n  maxDuration = 60,\n  onRecordingComplete,\n  onStatusChange,\n}: UseVoiceRecorderProps) {\n  const [isRecording, setIsRecording] = useState(false);\n  const [recordingTime, setRecordingTime] = useState(0);\n  \n  const mediaRecorderRef = useRef<MediaRecorder | null>(null);\n  const audioChunksRef = useRef<Blob[]>([]);\n  const timerRef = useRef<NodeJS.Timeout | null>(null);\n\n  const updateStatus = useCallback((status: string) => {\n    onStatusChange?.(status);\n  }, [onStatusChange]);\n\n  const startRecording = async () => {\n    try {\n      // Request microphone permission\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          echoCancellation: true,\n          noiseSuppression: true,\n          sampleRate: 44100,\n        },\n      });\n\n      // Create MediaRecorder instance with supported format\n      let mimeType = 'audio/webm';\n      if (MediaRecorder.isTypeSupported('audio/wav')) {\n        mimeType = 'audio/wav';\n      } else if (MediaRecorder.isTypeSupported('audio/ogg;codecs=opus')) {\n        mimeType = 'audio/ogg;codecs=opus';\n      } else if (MediaRecorder.isTypeSupported('audio/mp4')) {\n        mimeType = 'audio/mp4';\n      }\n      \n      const mediaRecorder = new MediaRecorder(stream, { mimeType });\n\n      mediaRecorderRef.current = mediaRecorder;\n      audioChunksRef.current = [];\n\n      // Set up event listeners\n      mediaRecorder.addEventListener('dataavailable', (event) => {\n        if (event.data.size > 0) {\n          audioChunksRef.current.push(event.data);\n        }\n      });\n\n      mediaRecorder.addEventListener('stop', () => {\n        const audioBlob = new Blob(audioChunksRef.current, {\n          type: mediaRecorder.mimeType || 'audio/webm',\n        });\n        onRecordingComplete?.(audioBlob);\n        \n        // Clean up\n        stream.getTracks().forEach(track => track.stop());\n      });\n\n      // Start recording\n      mediaRecorder.start(100); // Collect data every 100ms\n      setIsRecording(true);\n      setRecordingTime(0);\n      updateStatus(\"Aan het opnemen...\");\n\n      // Start timer\n      timerRef.current = setInterval(() => {\n        setRecordingTime(prev => {\n          const newTime = prev + 1;\n          \n          // Auto-stop at max duration\n          if (newTime >= maxDuration) {\n            stopRecording();\n          }\n          \n          return newTime;\n        });\n      }, 1000);\n\n    } catch (error) {\n      console.error('Failed to start recording:', error);\n      updateStatus(\"Microfoon toegang geweigerd\");\n      \n      // Show helpful error message\n      if (error instanceof DOMException) {\n        if (error.name === 'NotAllowedError') {\n          updateStatus(\"Geef toegang tot je microfoon in browserinstellingen\");\n        } else if (error.name === 'NotFoundError') {\n          updateStatus(\"Geen microfoon gevonden\");\n        } else {\n          updateStatus(\"Fout bij toegang tot microfoon\");\n        }\n      }\n    }\n  };\n\n  const stopRecording = () => {\n    if (mediaRecorderRef.current && isRecording) {\n      mediaRecorderRef.current.stop();\n      setIsRecording(false);\n      updateStatus(\"Opname gestopt, bezig met verwerken...\");\n      \n      // Clear timer\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n        timerRef.current = null;\n      }\n    }\n  };\n\n  // Clean up on component unmount\n  const cleanup = useCallback(() => {\n    if (timerRef.current) {\n      clearInterval(timerRef.current);\n    }\n    if (mediaRecorderRef.current && isRecording) {\n      mediaRecorderRef.current.stop();\n    }\n  }, [isRecording]);\n\n  return {\n    isRecording,\n    recordingTime,\n    startRecording,\n    stopRecording,\n    cleanup,\n  };\n}\n","size_bytes":3936},"client/src/lib/auth.ts":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\nimport { User } from \"@supabase/supabase-js\";\nimport { supabase } from \"./supabase\";\n\ninterface AuthContextType {\n  user: User | null;\n  loading: boolean;\n  signIn: (email: string, password: string) => Promise<void>;\n  signUp: (email: string, password: string, name: string, role: \"student\" | \"parent\") => Promise<void>;\n  signOut: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Get initial session\n    supabase.auth.getSession().then(({ data: { session } }) => {\n      setUser(session?.user ?? null);\n      setLoading(false);\n    });\n\n    // Listen for auth changes\n    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {\n      setUser(session?.user ?? null);\n      setLoading(false);\n    });\n\n    return () => subscription.unsubscribe();\n  }, []);\n\n  const signIn = async (email: string, password: string) => {\n    const { error } = await supabase.auth.signInWithPassword({\n      email,\n      password,\n    });\n    if (error) throw error;\n  };\n\n  const signUp = async (email: string, password: string, name: string, role: \"student\" | \"parent\") => {\n    const { error } = await supabase.auth.signUp({\n      email,\n      password,\n      options: {\n        data: {\n          name,\n          role,\n        }\n      }\n    });\n    if (error) throw error;\n  };\n\n  const signOut = async () => {\n    const { error } = await supabase.auth.signOut();\n    if (error) throw error;\n  };\n\n  const value = {\n    user,\n    loading,\n    signIn,\n    signUp,\n    signOut,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":2128},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nconst getApiBaseUrl = () => {\n  return import.meta.env.VITE_API_BASE_URL || '';\n};\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const fullUrl = url.startsWith('/api') ? `${getApiBaseUrl()}${url}` : url;\n  \n  // Handle FormData separately (don't set Content-Type for FormData)\n  const isFormData = data instanceof FormData;\n  const headers = !isFormData && data ? { \"Content-Type\": \"application/json\" } : {};\n  \n  const res = await fetch(fullUrl, {\n    method,\n    headers,\n    body: isFormData ? data : (data ? JSON.stringify(data) : undefined),\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const url = queryKey.join(\"/\") as string;\n    const fullUrl = url.startsWith('/api') ? `${getApiBaseUrl()}${url}` : url;\n    \n    const res = await fetch(fullUrl, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1835},"client/src/lib/supabase.ts":{"content":"import { createClient } from \"@supabase/supabase-js\";\n\nconst supabaseUrl = import.meta.env.VITE_SUPABASE_URL;\nconst supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  throw new Error(\"Missing Supabase environment variables\");\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n","size_bytes":347},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Help.tsx":{"content":"import * as React from \"react\";\nimport { useState } from \"react\";\nimport { Camera, Upload, Mic, Square } from \"lucide-react\";\nimport { useVoiceRecorder } from \"@/hooks/use-voice-recorder\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport HelpModal from \"@/components/HelpModal\";\n\nexport default function Help() {\n  const [textInput, setTextInput] = useState(\"\");\n  const [selectedCourse, setSelectedCourse] = useState(\"\");\n  const [showHelpModal, setShowHelpModal] = useState(false);\n  const [helpData, setHelpData] = useState<any>(null);\n\n  const courses = [\"Wiskunde A\", \"Biologie\", \"Economie\", \"Nederlands\"];\n\n  const handleVoiceRecording = (audioBlob: Blob) => {\n    // Convert audio to help data\n    setHelpData({\n      mode: \"voice\",\n      audioBlob,\n      course: selectedCourse,\n    });\n    setShowHelpModal(true);\n  };\n  \n  // Voice recording\n  const { \n    isRecording, \n    startRecording, \n    stopRecording, \n    recordingTime\n  } = useVoiceRecorder({\n    maxDuration: 60,\n    onRecordingComplete: handleVoiceRecording,\n    onStatusChange: (status) => {\n      console.log(\"Voice recording status:\", status);\n    }\n  });\n\n  const handleFileUpload = (type: \"photo\" | \"pdf\") => {\n    const input = document.createElement(\"input\");\n    input.type = \"file\";\n    input.accept = type === \"photo\" ? \"image/*\" : \".pdf\";\n    \n    input.onchange = (e) => {\n      const file = (e.target as HTMLInputElement).files?.[0];\n      if (file) {\n        // Set up help modal with file data\n        setHelpData({\n          mode: \"image\",\n          file,\n          course: selectedCourse,\n        });\n        setShowHelpModal(true);\n      }\n    };\n\n    input.click();\n  };\n\n  const handleTextHelp = () => {\n    if (!textInput.trim()) {\n      return;\n    }\n\n    setHelpData({\n      mode: \"text\",\n      text: textInput,\n      course: selectedCourse,\n    });\n    setShowHelpModal(true);\n  };\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')} / 1:00`;\n  };\n\n  return (\n    <div className=\"p-6\" data-testid=\"page-help\">\n      <h2 className=\"text-xl font-semibold mb-6\">Ik snap dit niet</h2>\n      \n      {/* Upload Options */}\n      <div className=\"grid grid-cols-3 gap-3 mb-6\">\n        <Button\n          variant=\"outline\"\n          className=\"h-24 flex flex-col items-center justify-center space-y-1 border-dashed hover:border-primary transition-colors\"\n          onClick={() => handleFileUpload(\"photo\")}\n          data-testid=\"button-upload-photo\"\n        >\n          <Camera className=\"w-5 h-5\" />\n          <div className=\"text-center\">\n            <p className=\"text-xs font-medium\">Foto</p>\n            <p className=\"text-xs text-muted-foreground\">Opgave</p>\n          </div>\n        </Button>\n\n        <Button\n          variant=\"outline\"\n          className=\"h-24 flex flex-col items-center justify-center space-y-1 border-dashed hover:border-primary transition-colors\"\n          onClick={isRecording ? stopRecording : startRecording}\n          data-testid=\"button-voice-help\"\n        >\n          {isRecording ? <Square className=\"w-5 h-5 text-destructive\" /> : <Mic className=\"w-5 h-5\" />}\n          <div className=\"text-center\">\n            <p className=\"text-xs font-medium\">{isRecording ? \"Stop\" : \"Vraag\"}</p>\n            <p className=\"text-xs text-muted-foreground\">\n              {isRecording ? formatTime(recordingTime) : \"Inspreek\"}\n            </p>\n          </div>\n        </Button>\n\n        <Button\n          variant=\"outline\"\n          className=\"h-24 flex flex-col items-center justify-center space-y-1 border-dashed hover:border-primary transition-colors\"\n          onClick={() => handleFileUpload(\"pdf\")}\n          data-testid=\"button-upload-pdf\"\n        >\n          <Upload className=\"w-5 h-5\" />\n          <div className=\"text-center\">\n            <p className=\"text-xs font-medium\">PDF</p>\n            <p className=\"text-xs text-muted-foreground\">Document</p>\n          </div>\n        </Button>\n      </div>\n\n      {/* Text Input */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Of beschrijf wat je niet snapt</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"help-text\">Beschrijving</Label>\n            <Textarea\n              id=\"help-text\"\n              value={textInput}\n              onChange={(e) => setTextInput(e.target.value)}\n              placeholder=\"Bijv. Ik snap niet hoe je de sinus van een hoek berekent...\"\n              className=\"resize-none\"\n              rows={4}\n              data-testid=\"textarea-help-text\"\n            />\n          </div>\n\n          <div className=\"flex items-end justify-between\">\n            <div className=\"space-y-1\">\n              <Label htmlFor=\"course\">Vak</Label>\n              <Select\n                value={selectedCourse}\n                onValueChange={setSelectedCourse}\n              >\n                <SelectTrigger className=\"w-40\" data-testid=\"select-course\">\n                  <SelectValue placeholder=\"Selecteer vak\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {courses.map((course) => (\n                    <SelectItem key={course} value={course}>\n                      {course}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <Button\n              onClick={handleTextHelp}\n              disabled={!textInput.trim()}\n              data-testid=\"button-get-help\"\n            >\n              Help krijgen\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Tips Card */}\n      <Card className=\"mt-6\">\n        <CardContent className=\"pt-6\">\n          <h3 className=\"font-medium mb-3\">Tips voor betere hulp:</h3>\n          <ul className=\"space-y-2 text-sm text-muted-foreground\">\n            <li className=\"flex items-start space-x-2\">\n              <span className=\"text-primary\">‚Ä¢</span>\n              <span>Wees zo specifiek mogelijk over wat je niet snapt</span>\n            </li>\n            <li className=\"flex items-start space-x-2\">\n              <span className=\"text-primary\">‚Ä¢</span>\n              <span>Bij foto's: zorg voor goede belichting en scherpte</span>\n            </li>\n            <li className=\"flex items-start space-x-2\">\n              <span className=\"text-primary\">‚Ä¢</span>\n              <span>Selecteer het juiste vak voor betere uitleg</span>\n            </li>\n            <li className=\"flex items-start space-x-2\">\n              <span className=\"text-primary\">‚Ä¢</span>\n              <span>Probeer eerst zelf te begrijpen voordat je de uitleg vraagt</span>\n            </li>\n          </ul>\n          \n          <div className=\"mt-4 p-3 bg-amber-50 border border-amber-200 rounded-md\">\n            <p className=\"text-sm text-amber-800\">\n              <strong>‚ö†Ô∏è Belangrijk:</strong> Controleer belangrijke informatie altijd met je schoolboek, docent of andere betrouwbare bronnen. AI kan soms fouten maken.\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Help Modal */}\n      <HelpModal\n        open={showHelpModal}\n        onOpenChange={setShowHelpModal}\n        helpData={helpData}\n      />\n    </div>\n  );\n}\n","size_bytes":7649},"client/src/pages/Login.tsx":{"content":"import * as React from \"react\";\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Login() {\n  const { signIn, signUp } = useAuth();\n  const { toast } = useToast();\n  \n  const [isLoading, setIsLoading] = useState(false);\n  const [loginData, setLoginData] = useState({\n    email: \"\",\n    password: \"\",\n  });\n  \n  const [signUpData, setSignUpData] = useState({\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    name: \"\",\n    role: \"student\" as \"student\" | \"parent\",\n    educationLevel: \"\" as \"vmbo\" | \"havo\" | \"vwo\" | \"mbo\" | \"\",\n    grade: \"\",\n  });\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    \n    try {\n      await signIn(loginData.email, loginData.password);\n      toast({\n        title: \"Welkom terug!\",\n        description: \"Je bent succesvol ingelogd.\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Inloggen mislukt\",\n        description: error.message || \"Controleer je gegevens en probeer opnieuw.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSignUp = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (signUpData.password !== signUpData.confirmPassword) {\n      toast({\n        title: \"Wachtwoorden komen niet overeen\",\n        description: \"Controleer je wachtwoorden en probeer opnieuw.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (signUpData.password.length < 6) {\n      toast({\n        title: \"Wachtwoord te kort\",\n        description: \"Je wachtwoord moet minimaal 6 karakters lang zijn.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (signUpData.role === 'student' && (!signUpData.educationLevel || !signUpData.grade)) {\n      toast({\n        title: \"Ontbrekende gegevens\",\n        description: \"Studenten moeten hun schoolniveau en jaargang invullen.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    setIsLoading(true);\n    \n    try {\n      await signUp(\n        signUpData.email, \n        signUpData.password, \n        signUpData.name, \n        signUpData.role,\n        signUpData.role === 'student' ? signUpData.educationLevel : undefined,\n        signUpData.role === 'student' ? signUpData.grade : undefined\n      );\n      toast({\n        title: \"Account aangemaakt!\",\n        description: \"Check je email voor verificatie en log daarna in.\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Registratie mislukt\",\n        description: error.message || \"Er ging iets mis bij het aanmaken van je account.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\" data-testid=\"login-page\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"w-16 h-16 bg-white rounded-full flex items-center justify-center mx-auto mb-4 p-2\">\n            <img \n              src=\"/noukie-logo.png\" \n              alt=\"Noukie Logo\" \n              className=\"w-full h-full object-contain\"\n            />\n          </div>\n          <CardTitle className=\"text-2xl\">Huiswerkcoach Noukie</CardTitle>\n          <p className=\"text-muted-foreground\">Jouw persoonlijke AI huiswerkcoach - dagelijkse check-ins, taakplanning en hulp bij huiswerk</p>\n        </CardHeader>\n        \n        <CardContent>\n          <Tabs defaultValue=\"login\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2\" data-testid=\"auth-tabs\">\n              <TabsTrigger value=\"login\" data-testid=\"tab-login\">Inloggen</TabsTrigger>\n              <TabsTrigger value=\"signup\" data-testid=\"tab-signup\">Registreren</TabsTrigger>\n            </TabsList>\n            \n            {/* Login Tab */}\n            <TabsContent value=\"login\">\n              <form onSubmit={handleLogin} className=\"space-y-4\" data-testid=\"login-form\">\n                <div>\n                  <Label htmlFor=\"login-email\">E-mailadres</Label>\n                  <Input\n                    id=\"login-email\"\n                    type=\"email\"\n                    value={loginData.email}\n                    onChange={(e) => setLoginData(prev => ({ ...prev, email: e.target.value }))}\n                    placeholder=\"je@example.com\"\n                    required\n                    data-testid=\"input-login-email\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"login-password\">Wachtwoord</Label>\n                  <Input\n                    id=\"login-password\"\n                    type=\"password\"\n                    value={loginData.password}\n                    onChange={(e) => setLoginData(prev => ({ ...prev, password: e.target.value }))}\n                    required\n                    data-testid=\"input-login-password\"\n                  />\n                </div>\n                \n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={isLoading}\n                  data-testid=\"button-login\"\n                >\n                  {isLoading ? \"Bezig met inloggen...\" : \"Inloggen\"}\n                </Button>\n              </form>\n            </TabsContent>\n            \n            {/* Sign Up Tab */}\n            <TabsContent value=\"signup\">\n              <form onSubmit={handleSignUp} className=\"space-y-4\" data-testid=\"signup-form\">\n                <div>\n                  <Label htmlFor=\"signup-name\">Volledige naam</Label>\n                  <Input\n                    id=\"signup-name\"\n                    type=\"text\"\n                    value={signUpData.name}\n                    onChange={(e) => setSignUpData(prev => ({ ...prev, name: e.target.value }))}\n                    placeholder=\"Je volledige naam\"\n                    required\n                    data-testid=\"input-signup-name\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"signup-email\">E-mailadres</Label>\n                  <Input\n                    id=\"signup-email\"\n                    type=\"email\"\n                    value={signUpData.email}\n                    onChange={(e) => setSignUpData(prev => ({ ...prev, email: e.target.value }))}\n                    placeholder=\"je@example.com\"\n                    required\n                    data-testid=\"input-signup-email\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"signup-role\">Rol</Label>\n                  <Select\n                    value={signUpData.role}\n                    onValueChange={(value: \"student\" | \"parent\") => setSignUpData(prev => ({ \n                      ...prev, \n                      role: value, \n                      // Reset student fields when switching to parent\n                      educationLevel: value === 'parent' ? \"\" : prev.educationLevel,\n                      grade: value === 'parent' ? \"\" : prev.grade\n                    }))}\n                  >\n                    <SelectTrigger data-testid=\"select-role\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"student\">Student</SelectItem>\n                      <SelectItem value=\"parent\">Ouder</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                {/* Student-specific fields */}\n                {signUpData.role === 'student' && (\n                  <>\n                    <div>\n                      <Label htmlFor=\"education-level\">Schoolniveau</Label>\n                      <Select\n                        value={signUpData.educationLevel}\n                        onValueChange={(value: \"vmbo\" | \"havo\" | \"vwo\" | \"mbo\") => setSignUpData(prev => ({ ...prev, educationLevel: value }))}\n                      >\n                        <SelectTrigger data-testid=\"select-education-level\">\n                          <SelectValue placeholder=\"Kies je schoolniveau\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"vmbo\">VMBO</SelectItem>\n                          <SelectItem value=\"havo\">HAVO</SelectItem>\n                          <SelectItem value=\"vwo\">VWO</SelectItem>\n                          <SelectItem value=\"mbo\">MBO</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"grade\">Klas/Jaargang</Label>\n                      <Select\n                        value={signUpData.grade}\n                        onValueChange={(value) => setSignUpData(prev => ({ ...prev, grade: value }))}\n                      >\n                        <SelectTrigger data-testid=\"select-grade\">\n                          <SelectValue placeholder=\"Kies je klas\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"1\">Klas 1</SelectItem>\n                          <SelectItem value=\"2\">Klas 2</SelectItem>\n                          <SelectItem value=\"3\">Klas 3</SelectItem>\n                          <SelectItem value=\"4\">Klas 4</SelectItem>\n                          <SelectItem value=\"5\">Klas 5</SelectItem>\n                          <SelectItem value=\"6\">Klas 6</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </>\n                )}\n                \n                <div>\n                  <Label htmlFor=\"signup-password\">Wachtwoord</Label>\n                  <Input\n                    id=\"signup-password\"\n                    type=\"password\"\n                    value={signUpData.password}\n                    onChange={(e) => setSignUpData(prev => ({ ...prev, password: e.target.value }))}\n                    placeholder=\"Minimaal 6 karakters\"\n                    required\n                    data-testid=\"input-signup-password\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"confirm-password\">Bevestig wachtwoord</Label>\n                  <Input\n                    id=\"confirm-password\"\n                    type=\"password\"\n                    value={signUpData.confirmPassword}\n                    onChange={(e) => setSignUpData(prev => ({ ...prev, confirmPassword: e.target.value }))}\n                    required\n                    data-testid=\"input-confirm-password\"\n                  />\n                </div>\n                \n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={isLoading}\n                  data-testid=\"button-signup\"\n                >\n                  {isLoading ? \"Bezig met registreren...\" : \"Account aanmaken\"}\n                </Button>\n              </form>\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":11719},"client/src/pages/Planning.tsx":{"content":"import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useAuth } from \"@/lib/auth\";\nimport type { Task, Course, Schedule } from \"@shared/schema\";\n\nexport default function Planning() {\n  const { user } = useAuth();\n  const [currentWeekOffset, setCurrentWeekOffset] = useState(0);\n\n  // Calculate week dates\n  const getWeekDates = (offset: number) => {\n    const today = new Date();\n    const startOfWeek = new Date(today);\n    startOfWeek.setDate(today.getDate() - today.getDay() + 1 + (offset * 7)); // Start from Monday\n    \n    const endOfWeek = new Date(startOfWeek);\n    endOfWeek.setDate(startOfWeek.getDate() + 6);\n    \n    return { startOfWeek, endOfWeek };\n  };\n\n  const { startOfWeek, endOfWeek } = getWeekDates(currentWeekOffset);\n\n  // Get tasks for the week (stable cache key using date strings)\n  const weekKey = `${startOfWeek.toISOString().split('T')[0]}-${endOfWeek.toISOString().split('T')[0]}`;\n  const { data: tasks = [], isLoading: tasksLoading } = useQuery<Task[]>({\n    queryKey: ['/api/tasks', user?.id, 'week', weekKey],\n    queryFn: async () => {\n      const response = await fetch(`/api/tasks/${user?.id}/week/${startOfWeek.toISOString()}/${endOfWeek.toISOString()}`);\n      return response.json();\n    },\n    enabled: !!user?.id,\n  });\n\n  // Get courses\n  const { data: courses = [] } = useQuery<Course[]>({\n    queryKey: ['/api/courses', user?.id],\n    enabled: !!user?.id,\n  });\n\n  // Get schedule\n  const { data: schedule = [] } = useQuery<Schedule[]>({\n    queryKey: ['/api/schedule', user?.id],\n    enabled: !!user?.id,\n  });\n\n  const formatWeekRange = (start: Date, end: Date) => {\n    const options: Intl.DateTimeFormatOptions = { day: 'numeric', month: 'long' };\n    return `${start.toLocaleDateString('nl-NL', options)} - ${end.toLocaleDateString('nl-NL', options)} ${end.getFullYear()}`;\n  };\n\n  const getDayName = (date: Date) => {\n    const days = ['zondag', 'maandag', 'dinsdag', 'woensdag', 'donderdag', 'vrijdag', 'zaterdag'];\n    return days[date.getDay()];\n  };\n\n  const getWeekDays = () => {\n    const days = [];\n    for (let i = 0; i < 7; i++) {\n      const date = new Date(startOfWeek);\n      date.setDate(startOfWeek.getDate() + i);\n      \n      // Get tasks for this day\n      const dayTasks = tasks.filter(task => {\n        if (!task.dueAt) return false;\n        const taskDate = new Date(task.dueAt);\n        return taskDate.toDateString() === date.toDateString();\n      });\n\n      // Get schedule items for this day\n      const daySchedule = schedule.filter(item => {\n        if (item.date) {\n          const itemDate = new Date(item.date);\n          return itemDate.toDateString() === date.toDateString();\n        }\n        return item.dayOfWeek === (date.getDay() === 0 ? 7 : date.getDay());\n      });\n\n      days.push({\n        date,\n        name: getDayName(date),\n        formattedDate: date.toLocaleDateString('nl-NL', { day: 'numeric', month: 'short' }),\n        tasks: dayTasks,\n        schedule: daySchedule,\n      });\n    }\n    return days;\n  };\n\n  const getCourseById = (courseId: string | null) => {\n    if (!courseId) return undefined;\n    return courses.find(c => c.id === courseId);\n  };\n\n  const formatTime = (timeString: string) => {\n    return timeString.slice(0, 5); // \"HH:MM\"\n  };\n\n  const getCompletionPercentage = () => {\n    const totalTasks = tasks.length;\n    const completedTasks = tasks.filter(task => task.status === 'done').length;\n    return totalTasks > 0 ? Math.round((completedTasks / totalTasks) * 100) : 0;\n  };\n\n  const weekDays = getWeekDays();\n\n  return (\n    <div className=\"p-6\" data-testid=\"page-planning\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h2 className=\"text-xl font-semibold\">Planning</h2>\n        <div className=\"text-sm text-muted-foreground\" data-testid=\"week-progress\">\n          Week {Math.ceil((startOfWeek.getTime() - new Date(startOfWeek.getFullYear(), 0, 1).getTime()) / (7 * 24 * 60 * 60 * 1000))} ‚Ä¢ {getCompletionPercentage()}% voltooid\n        </div>\n      </div>\n\n      {/* Week Navigation */}\n      <div className=\"flex items-center justify-between mb-6\" data-testid=\"week-navigation\">\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          onClick={() => setCurrentWeekOffset(currentWeekOffset - 1)}\n          data-testid=\"button-previous-week\"\n        >\n          <ChevronLeft className=\"w-5 h-5\" />\n        </Button>\n        \n        <h3 className=\"text-lg font-medium\" data-testid=\"text-current-week\">\n          {formatWeekRange(startOfWeek, endOfWeek)}\n        </h3>\n        \n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          onClick={() => setCurrentWeekOffset(currentWeekOffset + 1)}\n          data-testid=\"button-next-week\"\n        >\n          <ChevronRight className=\"w-5 h-5\" />\n        </Button>\n      </div>\n\n      {/* Weekly Schedule */}\n      {tasksLoading ? (\n        <div className=\"space-y-4\">\n          {[...Array(3)].map((_, i) => (\n            <div key={i} className=\"border border-border rounded-lg overflow-hidden animate-pulse\" data-testid={`day-skeleton-${i}`}>\n              <div className=\"bg-muted/50 h-12\" />\n              <div className=\"p-4 space-y-2\">\n                <div className=\"h-4 bg-muted rounded w-1/2\" />\n                <div className=\"h-3 bg-muted rounded w-1/3\" />\n              </div>\n            </div>\n          ))}\n        </div>\n      ) : (\n        <div className=\"space-y-4\">\n          {weekDays.map((day, index) => (\n            <div key={index} className=\"border border-border rounded-lg overflow-hidden\" data-testid={`day-card-${index}`}>\n              <div className=\"bg-muted/50 px-4 py-2 border-b border-border\">\n                <div className=\"flex items-center justify-between\">\n                  <h4 className=\"font-medium capitalize\" data-testid={`day-name-${index}`}>\n                    {day.name} {day.formattedDate}\n                  </h4>\n                  <span className=\"text-sm text-muted-foreground\" data-testid={`task-count-${index}`}>\n                    {day.tasks.length} taken\n                  </span>\n                </div>\n              </div>\n              \n              <div className=\"p-4 space-y-3\">\n                {/* Schedule Items */}\n                {day.schedule.map((item, scheduleIndex) => {\n                  const course = getCourseById(item.courseId);\n                  \n                  const getKindLabel = (kind: string) => {\n                    switch (kind) {\n                      case \"les\": return \"Les\";\n                      case \"toets\": return \"TOETS\";\n                      case \"sport\": return \"Sport/Training\";\n                      case \"werk\": return \"Bijbaan/Werk\";\n                      case \"afspraak\": return \"Afspraak\";\n                      case \"hobby\": return \"Hobby/Activiteit\";\n                      case \"anders\": return \"Anders\";\n                      default: return kind;\n                    }\n                  };\n\n                  const getKindColor = (kind: string) => {\n                    switch (kind) {\n                      case \"les\": return \"bg-blue-500\";\n                      case \"toets\": return \"bg-red-500\";\n                      case \"sport\": return \"bg-green-500\";\n                      case \"werk\": return \"bg-purple-500\";\n                      case \"afspraak\": return \"bg-orange-500\";\n                      case \"hobby\": return \"bg-pink-500\";\n                      case \"anders\": return \"bg-gray-500\";\n                      default: return \"bg-muted-foreground\";\n                    }\n                  };\n                  \n                  return (\n                    <div key={scheduleIndex} className=\"flex items-center space-x-3 text-sm\" data-testid={`schedule-item-${index}-${scheduleIndex}`}>\n                      <div className={`w-2 h-2 rounded-full flex-shrink-0 ${getKindColor(item.kind || 'les')}`} />\n                      <span className=\"text-muted-foreground w-16\">\n                        {item.startTime && formatTime(item.startTime)}\n                      </span>\n                      <span>\n                        {item.title || course?.name || 'Activiteit'} - {getKindLabel(item.kind || 'les')}\n                      </span>\n                      {course && item.title && (\n                        <span className=\"text-xs text-muted-foreground\">\n                          ({course.name})\n                        </span>\n                      )}\n                    </div>\n                  );\n                })}\n                \n                {/* Tasks */}\n                {day.tasks.length > 0 && (\n                  <div className=\"pt-2 border-t border-border space-y-2\">\n                    {day.tasks.map((task) => {\n                      const course = getCourseById(task.courseId);\n                      \n                      return (\n                        <div key={task.id} className=\"flex items-center space-x-3\" data-testid={`task-item-${task.id}`}>\n                          <Checkbox\n                            checked={task.status === 'done'}\n                            className=\"w-4 h-4\"\n                            data-testid={`checkbox-task-${task.id}`}\n                          />\n                          <span className={`flex-1 text-sm ${task.status === 'done' ? 'line-through opacity-60' : ''}`}>\n                            {task.title}\n                          </span>\n                          {task.estMinutes && (\n                            <span className=\"text-xs text-muted-foreground\">\n                              {task.estMinutes}m\n                            </span>\n                          )}\n                        </div>\n                      );\n                    })}\n                  </div>\n                )}\n                \n                {/* Empty State */}\n                {day.schedule.length === 0 && day.tasks.length === 0 && (\n                  <p className=\"text-sm text-muted-foreground italic\" data-testid={`empty-day-${index}`}>\n                    Geen activiteiten gepland\n                  </p>\n                )}\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":10381},"client/src/pages/Rooster.tsx":{"content":"import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Trash2, Plus, X, FileText, HelpCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useAuth } from \"@/lib/auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Schedule, Course } from \"@shared/schema\";\n\ninterface ScheduleFormData {\n  courseId: string;\n  dayOfWeek: number;\n  startTime: string;\n  endTime: string;\n  kind: \"les\" | \"toets\" | \"sport\" | \"werk\" | \"afspraak\" | \"hobby\" | \"anders\";\n  title: string;\n  date?: string;\n  isRecurring: boolean;\n}\n\nexport default function Rooster() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [formData, setFormData] = useState<ScheduleFormData>({\n    courseId: \"none\",\n    dayOfWeek: 1,\n    startTime: \"\",\n    endTime: \"\",\n    kind: \"les\",\n    title: \"\",\n    isRecurring: false,\n  });\n\n  const [courseFormData, setCourseFormData] = useState({\n    name: \"\",\n    level: \"havo5\",\n  });\n\n  const [showCourseForm, setShowCourseForm] = useState(false);\n  const [icalUrl, setIcalUrl] = useState(\"\");\n  const [showIcalForm, setShowIcalForm] = useState(false);\n  const [showDefaultSubjects, setShowDefaultSubjects] = useState(false);\n\n  // Get user's schedule\n  const { data: schedule = [], isLoading: scheduleLoading } = useQuery<Schedule[]>({\n    queryKey: ['/api/schedule', user?.id],\n    enabled: !!user?.id,\n  });\n\n  // Get user's courses\n  const { data: courses = [], isLoading: coursesLoading } = useQuery<Course[]>({\n    queryKey: ['/api/courses', user?.id],\n    enabled: !!user?.id,\n  });\n\n  // Create schedule item mutation\n  const createMutation = useMutation({\n    mutationFn: async (data: ScheduleFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/schedule\", {\n        userId: user?.id,\n        courseId: data.courseId === \"none\" ? null : data.courseId || null,\n        dayOfWeek: data.dayOfWeek,\n        startTime: data.startTime,\n        endTime: data.endTime,\n        kind: data.kind,\n        title: data.title || null,\n        date: data.date || null,\n        isRecurring: data.isRecurring,\n      });\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/schedule'] });\n      setFormData({\n        courseId: \"none\",\n        dayOfWeek: 1,\n        startTime: \"\",\n        endTime: \"\",\n        kind: \"les\",\n        title: \"\",\n        isRecurring: false,\n      });\n      toast({\n        title: \"Toegevoegd!\",\n        description: \"Het roosteritem is succesvol toegevoegd.\",\n      });\n    },\n    onError: (error) => {\n      console.error(\"Create schedule error:\", error);\n      toast({\n        title: \"Fout\",\n        description: \"Kon roosteritem niet toevoegen.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Create course mutation\n  const createCourseMutation = useMutation({\n    mutationFn: async (data: { name: string; level: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/courses\", {\n        userId: user?.id,\n        name: data.name,\n        level: data.level,\n      });\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/courses'] });\n      setCourseFormData({ name: \"\", level: \"havo5\" });\n      setShowCourseForm(false);\n      toast({\n        title: \"Vak toegevoegd!\",\n        description: \"Het vak is succesvol toegevoegd.\",\n      });\n    },\n    onError: (error) => {\n      console.error(\"Create course error:\", error);\n      toast({\n        title: \"Fout\",\n        description: \"Kon vak niet toevoegen.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Import iCal mutation\n  const importIcalMutation = useMutation({\n    mutationFn: async (url: string) => {\n      const response = await apiRequest(\"POST\", \"/api/schedule/import-ical\", {\n        userId: user?.id,\n        icalUrl: url.trim(),\n      });\n      return await response.json();\n    },\n    onSuccess: (result) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/schedule'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/courses'] });\n      setIcalUrl(\"\");\n      setShowIcalForm(false);\n      toast({\n        title: \"iCal ge√Ømporteerd!\",\n        description: `${result.scheduleCount || 0} roosteritems en ${result.courseCount || 0} vakken toegevoegd.`,\n      });\n    },\n    onError: (error) => {\n      console.error(\"iCal import error:\", error);\n      toast({\n        title: \"Import mislukt\",\n        description: \"Kon iCal URL niet importeren. Controleer de URL en probeer opnieuw.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Delete course mutation\n  const deleteCourseMutation = useMutation({\n    mutationFn: async (courseId: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/courses/${courseId}`);\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/courses'] });\n      toast({\n        title: \"Vak verwijderd!\",\n        description: \"Het vak is succesvol verwijderd.\",\n      });\n    },\n    onError: (error) => {\n      console.error(\"Delete course error:\", error);\n      toast({\n        title: \"Fout\",\n        description: \"Kon vak niet verwijderen.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Delete schedule item mutation\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/schedule/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/schedule'] });\n      toast({\n        title: \"Verwijderd\",\n        description: \"Het roosteritem is verwijderd.\",\n      });\n    },\n    onError: (error) => {\n      console.error(\"Delete schedule error:\", error);\n      toast({\n        title: \"Fout\",\n        description: \"Kon roosteritem niet verwijderen.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.startTime || !formData.endTime || !formData.title.trim()) {\n      toast({\n        title: \"Incomplete gegevens\",\n        description: \"Vul alle verplichte velden in (titel, start- en eindtijd).\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    createMutation.mutate(formData);\n  };\n\n  const handleCourseSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!courseFormData.name.trim()) {\n      toast({\n        title: \"Vak naam vereist\",\n        description: \"Vul een vaknaam in.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    createCourseMutation.mutate(courseFormData);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Weet je zeker dat je dit roosteritem wilt verwijderen?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const getCourseById = (courseId: string | null) => {\n    if (!courseId) return undefined;\n    return courses.find(c => c.id === courseId);\n  };\n\n  const getDayName = (dayOfWeek: number) => {\n    const days = [\"\", \"Maandag\", \"Dinsdag\", \"Woensdag\", \"Donderdag\", \"Vrijdag\", \"Zaterdag\", \"Zondag\"];\n    return days[dayOfWeek] || \"\";\n  };\n\n  const formatTime = (timeString: string) => {\n    return timeString.slice(0, 5); // \"HH:MM\"\n  };\n\n  const getKindLabel = (kind: string) => {\n    switch (kind) {\n      case \"les\": return \"Les\";\n      case \"toets\": return \"Toets\";\n      case \"sport\": return \"Sport/Training\";\n      case \"werk\": return \"Bijbaan/Werk\";\n      case \"afspraak\": return \"Afspraak\";\n      case \"hobby\": return \"Hobby/Activiteit\";\n      case \"anders\": return \"Anders\";\n      default: return kind;\n    }\n  };\n\n  const getKindColor = (kind: string) => {\n    switch (kind) {\n      case \"les\": return \"bg-blue-100 text-blue-800\";\n      case \"toets\": return \"bg-red-100 text-red-800\";\n      case \"sport\": return \"bg-green-100 text-green-800\";\n      case \"werk\": return \"bg-purple-100 text-purple-800\";\n      case \"afspraak\": return \"bg-orange-100 text-orange-800\";\n      case \"hobby\": return \"bg-pink-100 text-pink-800\";\n      case \"anders\": return \"bg-gray-100 text-gray-800\";\n      default: return \"bg-muted text-muted-foreground\";\n    }\n  };\n\n  // Group schedule by day for better display\n  const groupedSchedule = schedule.reduce((acc, item) => {\n    const key = item.dayOfWeek || 0;\n    if (!acc[key]) acc[key] = [];\n    acc[key].push(item);\n    return acc;\n  }, {} as Record<number, Schedule[]>);\n\n  return (\n    <div className=\"p-6\" data-testid=\"page-rooster\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h2 className=\"text-xl font-semibold\">Activiteit toevoegen</h2>\n      </div>\n\n      {/* Schedule Form */}\n      <Card className=\"mb-6\">\n        <CardHeader>\n          <CardTitle>Nieuwe activiteit</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\" data-testid=\"schedule-form\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"kind\">Type activiteit</Label>\n                <Select \n                  value={formData.kind} \n                  onValueChange={(value: \"les\" | \"toets\" | \"sport\" | \"werk\" | \"afspraak\" | \"hobby\" | \"anders\") => \n                    setFormData(prev => ({ ...prev, kind: value }))\n                  }\n                >\n                  <SelectTrigger data-testid=\"select-kind\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"les\">Les</SelectItem>\n                    <SelectItem value=\"toets\">Toets</SelectItem>\n                    <SelectItem value=\"sport\">Sport/Training</SelectItem>\n                    <SelectItem value=\"werk\">Bijbaan/Werk</SelectItem>\n                    <SelectItem value=\"afspraak\">Afspraak</SelectItem>\n                    <SelectItem value=\"hobby\">Hobby/Activiteit</SelectItem>\n                    <SelectItem value=\"anders\">Anders</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"title\">Titel</Label>\n                <Input\n                  id=\"title\"\n                  value={formData.title}\n                  onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n                  placeholder={formData.kind === 'sport' ? 'bijv. Hockeytraining AHC' : formData.kind === 'werk' ? 'bijv. Albert Heijn' : 'Titel van activiteit'}\n                  data-testid=\"input-title\"\n                />\n              </div>\n            </div>\n\n            {/* Only show course selection for lessons and tests */}\n            {(formData.kind === 'les' || formData.kind === 'toets') && (\n              <div>\n                <Label htmlFor=\"course\">Vak</Label>\n                <Select \n                  value={formData.courseId} \n                  onValueChange={(value) => setFormData(prev => ({ ...prev, courseId: value }))}\n                >\n                  <SelectTrigger data-testid=\"select-course\">\n                    <SelectValue placeholder=\"Kies een vak\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"none\">Geen vak</SelectItem>\n                    {courses.map((course) => (\n                      <SelectItem key={course.id} value={course.id}>\n                        {course.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            )}\n\n            <div className=\"grid grid-cols-3 gap-4\">\n              <div>\n                <Label htmlFor=\"day\">Dag</Label>\n                <Select \n                  value={formData.dayOfWeek.toString()} \n                  onValueChange={(value) => setFormData(prev => ({ ...prev, dayOfWeek: parseInt(value) }))}\n                >\n                  <SelectTrigger data-testid=\"select-day\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"1\">Maandag</SelectItem>\n                    <SelectItem value=\"2\">Dinsdag</SelectItem>\n                    <SelectItem value=\"3\">Woensdag</SelectItem>\n                    <SelectItem value=\"4\">Donderdag</SelectItem>\n                    <SelectItem value=\"5\">Vrijdag</SelectItem>\n                    <SelectItem value=\"6\">Zaterdag</SelectItem>\n                    <SelectItem value=\"7\">Zondag</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"startTime\">Begintijd</Label>\n                <Input\n                  id=\"startTime\"\n                  type=\"time\"\n                  value={formData.startTime}\n                  onChange={(e) => setFormData(prev => ({ ...prev, startTime: e.target.value }))}\n                  data-testid=\"input-start-time\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"endTime\">Eindtijd</Label>\n                <Input\n                  id=\"endTime\"\n                  type=\"time\"\n                  value={formData.endTime}\n                  onChange={(e) => setFormData(prev => ({ ...prev, endTime: e.target.value }))}\n                  data-testid=\"input-end-time\"\n                />\n              </div>\n            </div>\n\n            {/* Recurring checkbox (only for non-lesson activities) */}\n            {formData.kind !== 'les' && formData.kind !== 'toets' && (\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id=\"recurring\"\n                  checked={formData.isRecurring}\n                  onCheckedChange={(checked) => \n                    setFormData(prev => ({ ...prev, isRecurring: checked === true }))\n                  }\n                  data-testid=\"checkbox-recurring\"\n                />\n                <Label htmlFor=\"recurring\">Elke week herhalen</Label>\n              </div>\n            )}\n\n            <Button \n              type=\"submit\" \n              disabled={createMutation.isPending}\n              className=\"w-full\"\n              data-testid=\"button-create-schedule\"\n            >\n              {createMutation.isPending ? \"Toevoegen...\" : \"Activiteit toevoegen\"}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n\n      {/* Add Courses Section */}\n      <Card className=\"mb-6\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>Vakken beheren</CardTitle>\n            <div className=\"flex gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setShowCourseForm(!showCourseForm)}\n                data-testid=\"button-toggle-course-form\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Vak toevoegen\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {/* Current Courses */}\n          {coursesLoading ? (\n            <div className=\"text-sm text-muted-foreground\">Laden...</div>\n          ) : courses.length > 0 ? (\n            <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2 mb-4\">\n              {courses.map((course) => (\n                <div\n                  key={course.id}\n                  className=\"bg-muted rounded-lg p-3 text-sm relative group\"\n                  data-testid={`course-${course.id}`}\n                >\n                  <div className=\"font-medium\">{course.name}</div>\n                  <div className=\"text-xs text-muted-foreground\">{course.level}</div>\n                  <button\n                    onClick={() => {\n                      if (confirm(`Weet je zeker dat je het vak \"${course.name}\" wilt verwijderen?`)) {\n                        deleteCourseMutation.mutate(course.id);\n                      }\n                    }}\n                    disabled={deleteCourseMutation.isPending}\n                    className=\"absolute top-1 right-1 text-red-500 hover:text-red-700 opacity-0 group-hover:opacity-100 transition-opacity\"\n                    data-testid={`button-delete-course-${course.id}`}\n                    title=\"Vak verwijderen\"\n                  >\n                    <X className=\"w-3 h-3\" />\n                  </button>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"space-y-3 mb-4\">\n              <div className=\"text-sm text-muted-foreground\">\n                Geen vakken toegevoegd. Voeg eerst vakken toe voordat je lessen kunt inplannen.\n              </div>\n              <Alert>\n                <HelpCircle className=\"h-4 w-4\" />\n                <AlertDescription>\n                  üí° <strong>Tip:</strong> Voeg je vakken toe met de \"Vak toevoegen\" knop zodat je lessen kunt inplannen.\n                </AlertDescription>\n              </Alert>\n            </div>\n          )}\n\n          {/* Add Course Form */}\n          {showCourseForm && (\n            <form onSubmit={handleCourseSubmit} className=\"space-y-3 p-4 bg-muted/50 rounded-lg\" data-testid=\"course-form\">\n              <div className=\"grid grid-cols-2 gap-3\">\n                <div>\n                  <Label htmlFor=\"courseName\">Vaknaam</Label>\n                  <Input\n                    id=\"courseName\"\n                    value={courseFormData.name}\n                    onChange={(e) => setCourseFormData(prev => ({ ...prev, name: e.target.value }))}\n                    placeholder=\"Bijv. Wiskunde, Nederlands\"\n                    data-testid=\"input-course-name\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"courseLevel\">Niveau</Label>\n                  <Select\n                    value={courseFormData.level}\n                    onValueChange={(value) => setCourseFormData(prev => ({ ...prev, level: value }))}\n                  >\n                    <SelectTrigger data-testid=\"select-course-level\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"havo4\">Havo 4</SelectItem>\n                      <SelectItem value=\"havo5\">Havo 5</SelectItem>\n                      <SelectItem value=\"vwo5\">VWO 5</SelectItem>\n                      <SelectItem value=\"vwo6\">VWO 6</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              <div className=\"flex space-x-2\">\n                <Button\n                  type=\"submit\"\n                  size=\"sm\"\n                  disabled={createCourseMutation.isPending}\n                  data-testid=\"button-add-course\"\n                >\n                  {createCourseMutation.isPending ? \"Bezig...\" : \"Vak toevoegen\"}\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setShowCourseForm(false)}\n                  data-testid=\"button-cancel-course\"\n                >\n                  Annuleren\n                </Button>\n              </div>\n            </form>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* iCal Import Section */}\n      <Card className=\"mb-6\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>Rooster importeren</CardTitle>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setShowIcalForm(!showIcalForm)}\n              data-testid=\"button-toggle-ical-form\"\n            >\n              <FileText className=\"w-4 h-4 mr-2\" />\n              iCal URL\n            </Button>\n          </div>\n        </CardHeader>\n        \n        {showIcalForm && (\n          <CardContent>\n            <Alert className=\"mb-4\">\n              <HelpCircle className=\"h-4 w-4\" />\n              <AlertDescription>\n                <strong>üìö SomToday gebruikers:</strong> Log in op SomToday ‚Üí Rooster ‚Üí Exporteren ‚Üí Kopieer de iCal URL. \n                Plak deze hieronder om je hele rooster in √©√©n keer te importeren!\n              </AlertDescription>\n            </Alert>\n            \n            <form onSubmit={(e) => {\n              e.preventDefault();\n              if (icalUrl.trim()) {\n                importIcalMutation.mutate(icalUrl.trim());\n              }\n            }} className=\"space-y-3\">\n              <div>\n                <Label htmlFor=\"icalUrl\">iCal URL</Label>\n                <Input\n                  id=\"icalUrl\"\n                  value={icalUrl}\n                  onChange={(e) => setIcalUrl(e.target.value)}\n                  placeholder=\"https://example.com/calendar.ics\"\n                  data-testid=\"input-ical-url\"\n                />\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Plak hier de iCal link van je school rooster (SomToday, Zermelo, etc.)\n                </p>\n              </div>\n              \n              <div className=\"flex space-x-2\">\n                <Button\n                  type=\"submit\"\n                  size=\"sm\"\n                  disabled={importIcalMutation.isPending || !icalUrl.trim()}\n                  data-testid=\"button-import-ical\"\n                >\n                  {importIcalMutation.isPending ? \"Importeren...\" : \"Rooster importeren\"}\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setShowIcalForm(false)}\n                  data-testid=\"button-cancel-ical\"\n                >\n                  Annuleren\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        )}\n      </Card>\n\n      {/* Current Schedule */}\n      <div>\n        <h3 className=\"font-medium mb-4\">Huidig rooster</h3>\n        \n        {scheduleLoading ? (\n          <div className=\"space-y-3\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"bg-card border border-border rounded-lg p-4 animate-pulse\" data-testid={`schedule-skeleton-${i}`}>\n                <div className=\"h-4 bg-muted rounded w-1/3 mb-2\" />\n                <div className=\"h-3 bg-muted rounded w-1/2 mb-1\" />\n                <div className=\"h-3 bg-muted rounded w-1/4\" />\n              </div>\n            ))}\n          </div>\n        ) : Object.keys(groupedSchedule).length > 0 ? (\n          <div className=\"space-y-4\">\n            {Object.entries(groupedSchedule)\n              .sort(([a], [b]) => parseInt(a) - parseInt(b))\n              .map(([dayOfWeek, items]) => (\n                <div key={dayOfWeek}>\n                  <h4 className=\"font-medium text-sm text-muted-foreground mb-2\" data-testid={`day-header-${dayOfWeek}`}>\n                    {getDayName(parseInt(dayOfWeek))}\n                  </h4>\n                  <div className=\"space-y-2\">\n                    {items.map((item) => {\n                      const course = getCourseById(item.courseId);\n                      \n                      return (\n                        <div\n                          key={item.id}\n                          className=\"bg-card border border-border rounded-lg p-4 flex items-center justify-between\"\n                          data-testid={`schedule-item-${item.id}`}\n                        >\n                          <div>\n                            <div className=\"flex items-center space-x-2 mb-1\">\n                              <h5 className=\"font-medium\">\n                                {item.title || course?.name || \"Activiteit\"}\n                              </h5>\n                              <span className={`text-xs px-2 py-0.5 rounded font-medium ${getKindColor(item.kind || 'les')}`}>\n                                {getKindLabel(item.kind || 'les')}\n                              </span>\n                            </div>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {item.startTime && item.endTime && \n                                `${formatTime(item.startTime)} - ${formatTime(item.endTime)}`\n                              }\n                            </p>\n                            {course && (\n                              <p className=\"text-sm text-muted-foreground\">\n                                Vak: {course.name}\n                              </p>\n                            )}\n                          </div>\n                          \n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            onClick={() => handleDelete(item.id)}\n                            className=\"text-destructive hover:bg-destructive/10\"\n                            disabled={deleteMutation.isPending}\n                            data-testid={`button-delete-${item.id}`}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n              ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"empty-schedule\">\n            <p>Nog geen roosteritems toegevoegd</p>\n            <p className=\"text-sm mt-1\">Voeg je eerste les of toets toe met het formulier hierboven.</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":26213},"client/src/pages/Vandaag.tsx":{"content":"import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/lib/auth\";\nimport TextCheckin from \"@/components/TextCheckin\";\nimport TaskCard from \"@/components/TaskCard\";\nimport AppIntroModal from \"@/components/AppIntroModal\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Play, Plus, UserCheck, X, Info } from \"lucide-react\";\nimport { useAudio } from \"@/hooks/use-audio\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Task, Course, Session, Schedule } from \"@shared/schema\";\n\nexport default function Vandaag() {\n  const { user } = useAuth();\n  const { playAudio } = useAudio();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  // Task form state\n  const [showTaskForm, setShowTaskForm] = useState(false);\n  const [showIntroModal, setShowIntroModal] = useState(false);\n  const [hasSeenIntro, setHasSeenIntro] = useState(false);\n  const [taskForm, setTaskForm] = useState({\n    title: \"\",\n    courseId: \"\",\n    estMinutes: 30,\n    priority: 1,\n    dueAt: new Date().toISOString().split('T')[0] // Today's date\n  });\n\n  // Check if this is the first time visiting the app\n  React.useEffect(() => {\n    const hasSeenIntroKey = `hasSeenIntro_${user?.id}`;\n    const hasSeenBefore = localStorage.getItem(hasSeenIntroKey);\n    \n    if (!hasSeenBefore && user?.id) {\n      // First time visit - show intro automatically\n      setShowIntroModal(true);\n      setHasSeenIntro(false);\n    } else {\n      setHasSeenIntro(true);\n    }\n  }, [user?.id]);\n\n  // Handle intro modal close\n  const handleIntroModalClose = (open: boolean) => {\n    setShowIntroModal(open);\n    if (!open && user?.id) {\n      // Mark as seen when modal is closed\n      const hasSeenIntroKey = `hasSeenIntro_${user?.id}`;\n      localStorage.setItem(hasSeenIntroKey, 'true');\n      setHasSeenIntro(true);\n    }\n  };\n\n  // Get today's tasks\n  const { data: tasks = [], isLoading: tasksLoading } = useQuery<Task[]>({\n    queryKey: ['/api/tasks', user?.id, 'today'],\n    enabled: !!user?.id,\n  });\n\n  // Get user's courses\n  const { data: courses = [] } = useQuery<Course[]>({\n    queryKey: ['/api/courses', user?.id],\n    enabled: !!user?.id,\n  });\n\n  // Get last session\n  const { data: lastSession } = useQuery<Session>({\n    queryKey: ['/api/sessions', user?.id, 'last'],\n    enabled: !!user?.id,\n  });\n\n  // Get today's schedule\n  const { data: todaySchedule = [] } = useQuery<Schedule[]>({\n    queryKey: ['/api/schedule', user?.id, 'today'],\n    enabled: !!user?.id,\n  });\n\n  // Get pending parent requests (for students only)\n  const { data: parentRequests = [] } = useQuery({\n    queryKey: ['/api/student', user?.id, 'parent-requests'],\n    enabled: !!user?.id && user?.user_metadata?.role === 'student',\n  });\n\n  // Create task mutation\n  const createTaskMutation = useMutation({\n    mutationFn: async () => {\n      if (!taskForm.title.trim()) {\n        throw new Error(\"Taak titel is verplicht\");\n      }\n      \n      const response = await apiRequest(\"POST\", \"/api/tasks\", {\n        userId: user?.id,\n        courseId: taskForm.courseId || null,\n        title: taskForm.title,\n        dueAt: new Date(taskForm.dueAt).toISOString(),\n        estMinutes: taskForm.estMinutes,\n        priority: taskForm.priority,\n        source: \"manual\",\n        status: \"todo\"\n      });\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/tasks'] });\n      setTaskForm({\n        title: \"\",\n        courseId: \"\",\n        estMinutes: 30,\n        priority: 1,\n        dueAt: new Date().toISOString().split('T')[0]\n      });\n      setShowTaskForm(false);\n      toast({\n        title: \"Taak toegevoegd!\",\n        description: \"Je nieuwe taak is succesvol toegevoegd.\"\n      });\n    },\n    onError: (error) => {\n      console.error(\"Create task error:\", error);\n      toast({\n        title: \"Fout bij toevoegen\",\n        description: \"Kon taak niet toevoegen. Probeer opnieuw.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Confirm parent relationship mutation\n  const confirmParentMutation = useMutation({\n    mutationFn: async (relationshipId: string) => {\n      return await apiRequest('POST', '/api/parent/confirm', { relationshipId });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Ouder bevestigd\",\n        description: \"Je ouder kan nu je voortgang bekijken.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/student'] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Kon ouder niet bevestigen\",\n        description: error.message || \"Probeer het later opnieuw.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Check if reminder should be shown\n  const shouldShowReminder = () => {\n    if (!lastSession) return false;\n    const today = new Date();\n    const sessionDate = new Date(lastSession.happenedAt || new Date());\n    const reminderHour = parseInt(import.meta.env.VITE_APP_REMINDER_HOUR || \"16\", 10);\n    \n    return (\n      sessionDate.toDateString() !== today.toDateString() &&\n      today.getHours() >= reminderHour\n    );\n  };\n\n  const getCourseById = (courseId: string | null) => {\n    if (!courseId) return undefined;\n    return courses.find(c => c.id === courseId);\n  };\n\n  const formatTime = (timeString: string) => {\n    return timeString.slice(0, 5); // \"HH:MM\"\n  };\n\n  const formatRelativeTime = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));\n    \n    if (diffHours < 1) return \"Zojuist\";\n    if (diffHours === 1) return \"1 uur geleden\";\n    return `${diffHours} uur geleden`;\n  };\n\n  const playLastCoachAudio = () => {\n    if (lastSession?.coachText) {\n      // In production, this would play the actual TTS audio\n      const apiBaseUrl = import.meta.env.VITE_API_BASE_URL || '';\n      playAudio(`${apiBaseUrl}/api/tts/dummy.mp3`);\n    }\n  };\n\n  return (\n    <div data-testid=\"page-vandaag\">\n      {/* Parent Request Notifications (for students only) */}\n      {user?.user_metadata?.role === 'student' && Array.isArray(parentRequests) && parentRequests.length > 0 && (\n        <div className=\"p-4 space-y-2\">\n          {parentRequests.map((request: any) => (\n            <Alert key={request.id} className=\"border-blue-200 bg-blue-50\">\n              <UserCheck className=\"h-4 w-4\" />\n              <AlertDescription className=\"flex items-center justify-between\">\n                <div>\n                  <strong>{request.parentName}</strong> wil je ouder worden.\n                  <br />\n                  <span className=\"text-sm text-muted-foreground\">{request.parentEmail}</span>\n                </div>\n                <div className=\"flex gap-2 ml-4\">\n                  <Button\n                    size=\"sm\"\n                    onClick={() => confirmParentMutation.mutate(request.id)}\n                    disabled={confirmParentMutation.isPending}\n                    data-testid={`button-confirm-parent-${request.id}`}\n                  >\n                    Bevestigen\n                  </Button>\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => {\n                      toast({\n                        title: \"Binnenkort beschikbaar\",\n                        description: \"Afwijzen functionaliteit wordt nog ontwikkeld.\"\n                      });\n                    }}\n                    data-testid={`button-reject-parent-${request.id}`}\n                  >\n                    <X className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </AlertDescription>\n            </Alert>\n          ))}\n        </div>\n      )}\n    \n      {/* Reminder Banner */}\n      {shouldShowReminder() && (\n        <div className=\"bg-accent text-accent-foreground p-4 m-4 rounded-lg flex items-center space-x-3\" data-testid=\"reminder-banner\">\n          <svg className=\"w-5 h-5 flex-shrink-0\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n          </svg>\n          <span className=\"text-sm font-medium\">Je check-in voor vandaag ontbreekt</span>\n        </div>\n      )}\n\n      {/* Text Check-in */}\n      <TextCheckin />\n\n      {/* Last Coach Audio */}\n      {lastSession && (\n        <section className=\"px-6 pb-4\" data-testid=\"last-coach-message\">\n          <div className=\"bg-card border border-border rounded-lg p-4\">\n            <h3 className=\"font-medium text-sm text-muted-foreground mb-3\">Laatste Coach Bericht</h3>\n            <div className=\"flex items-center space-x-3\">\n              <Button\n                size=\"icon\"\n                className=\"w-10 h-10 bg-primary text-primary-foreground rounded-full\"\n                onClick={playLastCoachAudio}\n                data-testid=\"button-play-last-audio\"\n              >\n                <Play className=\"w-5 h-5\" />\n              </Button>\n              <div className=\"flex-1\">\n                <p className=\"text-sm\" data-testid=\"text-last-coach-message\">\n                  {lastSession.coachText || lastSession.summary || \"Geen bericht beschikbaar\"}\n                </p>\n                <div className=\"flex items-center space-x-2 mt-1\">\n                  <div className=\"text-xs text-muted-foreground\" data-testid=\"text-last-message-time\">\n                    {lastSession.happenedAt ? formatRelativeTime(lastSession.happenedAt.toString()) : 'Onbekend'}\n                  </div>\n                  <div className=\"w-1 h-1 bg-muted-foreground rounded-full\" />\n                  <div className=\"text-xs text-muted-foreground\">0:24</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </section>\n      )}\n\n      {/* Today's Tasks */}\n      <section className=\"px-6 pb-4\" data-testid=\"today-tasks\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center gap-3\">\n            <h3 className=\"text-lg font-semibold\">Vandaag</h3>\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              className=\"h-8 w-8 p-0 text-muted-foreground hover:text-primary relative\"\n              onClick={() => setShowIntroModal(true)}\n              data-testid=\"button-app-intro\"\n            >\n              <Info className=\"w-4 h-4\" />\n              {!hasSeenIntro && (\n                <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-primary rounded-full border-2 border-white animate-pulse\" />\n              )}\n            </Button>\n          </div>\n          <Button \n            size=\"sm\" \n            className=\"h-8 w-8 p-0\" \n            onClick={() => setShowTaskForm(!showTaskForm)}\n            data-testid=\"button-add-task\"\n          >\n            <Plus className=\"w-4 h-4\" />\n          </Button>\n        </div>\n        \n        {/* Inline Task Form */}\n        {showTaskForm && (\n          <Card className=\"mb-4\">\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Nieuwe taak toevoegen</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"task-title\">Taak titel</Label>\n                <Input\n                  id=\"task-title\"\n                  value={taskForm.title}\n                  onChange={(e) => setTaskForm({...taskForm, title: e.target.value})}\n                  placeholder=\"Bijv. Wiskunde hoofdstuk 3 lezen\"\n                  data-testid=\"input-task-title\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"task-course\">Vak</Label>\n                <select \n                  id=\"task-course\"\n                  value={taskForm.courseId} \n                  onChange={(e) => setTaskForm({...taskForm, courseId: e.target.value})}\n                  className=\"w-full p-2 border rounded\"\n                  data-testid=\"select-task-course\"\n                >\n                  <option value=\"\">Geen vak</option>\n                  {courses.map((course) => (\n                    <option key={course.id} value={course.id}>\n                      {course.name}\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"task-time\">Geschatte tijd (min)</Label>\n                  <Input\n                    id=\"task-time\"\n                    type=\"number\"\n                    value={taskForm.estMinutes}\n                    onChange={(e) => setTaskForm({...taskForm, estMinutes: parseInt(e.target.value) || 30})}\n                    min=\"5\"\n                    max=\"240\"\n                    data-testid=\"input-task-time\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"task-priority\">Prioriteit</Label>\n                  <select \n                    value={taskForm.priority.toString()} \n                    onChange={(e) => setTaskForm({...taskForm, priority: parseInt(e.target.value)})}\n                    className=\"w-full p-2 border rounded\"\n                    data-testid=\"select-task-priority\"\n                  >\n                    <option value=\"0\">Laag</option>\n                    <option value=\"1\">Normaal</option>\n                    <option value=\"2\">Hoog</option>\n                  </select>\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"task-due\">Deadline</Label>\n                <Input\n                  id=\"task-due\"\n                  type=\"date\"\n                  value={taskForm.dueAt}\n                  onChange={(e) => setTaskForm({...taskForm, dueAt: e.target.value})}\n                  data-testid=\"input-task-due\"\n                />\n              </div>\n\n              <div className=\"flex space-x-2 pt-4\">\n                <Button\n                  onClick={() => createTaskMutation.mutate()}\n                  disabled={createTaskMutation.isPending || !taskForm.title.trim()}\n                  className=\"flex-1\"\n                  data-testid=\"button-save-task\"\n                >\n                  {createTaskMutation.isPending ? \"Bezig...\" : \"Toevoegen\"}\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setShowTaskForm(false)}\n                  data-testid=\"button-cancel-task\"\n                >\n                  Annuleren\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n        \n        {tasksLoading ? (\n          <div className=\"space-y-3\">\n            {[...Array(2)].map((_, i) => (\n              <div key={i} className=\"bg-card border border-border rounded-lg p-4 animate-pulse\" data-testid={`task-skeleton-${i}`}>\n                <div className=\"h-4 bg-muted rounded w-1/3 mb-2\" />\n                <div className=\"h-5 bg-muted rounded w-2/3 mb-1\" />\n                <div className=\"h-3 bg-muted rounded w-1/4\" />\n              </div>\n            ))}\n          </div>\n        ) : tasks.length > 0 ? (\n          <div className=\"space-y-3\">\n            {tasks.map((task) => (\n              <TaskCard\n                key={task.id}\n                task={task}\n                course={getCourseById(task.courseId)}\n              />\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"no-tasks\">\n            <p>Geen taken voor vandaag!</p>\n            <p className=\"text-sm mt-1\">Doe een check-in om taken toe te voegen.</p>\n          </div>\n        )}\n      </section>\n\n      {/* Today's Schedule */}\n      <section className=\"px-6 pb-6\" data-testid=\"today-schedule\">\n        <h3 className=\"text-lg font-semibold mb-4\">Vandaag op de planning</h3>\n        \n        {todaySchedule.length > 0 ? (\n          <div className=\"space-y-3\">\n            {todaySchedule.map((item) => {\n              const course = getCourseById(item.courseId);\n              \n              const getKindLabel = (kind: string) => {\n                switch (kind) {\n                  case \"les\": return \"Les\";\n                  case \"toets\": return \"Toets\";\n                  case \"sport\": return \"Sport/Training\";\n                  case \"werk\": return \"Bijbaan/Werk\";\n                  case \"afspraak\": return \"Afspraak\";\n                  case \"hobby\": return \"Hobby/Activiteit\";\n                  case \"anders\": return \"Anders\";\n                  default: return kind;\n                }\n              };\n\n              const getKindColor = (kind: string) => {\n                switch (kind) {\n                  case \"les\": return \"bg-blue-100 text-blue-800 border-blue-200\";\n                  case \"toets\": return \"bg-red-100 text-red-800 border-red-200\";\n                  case \"sport\": return \"bg-green-100 text-green-800 border-green-200\";\n                  case \"werk\": return \"bg-purple-100 text-purple-800 border-purple-200\";\n                  case \"afspraak\": return \"bg-orange-100 text-orange-800 border-orange-200\";\n                  case \"hobby\": return \"bg-pink-100 text-pink-800 border-pink-200\";\n                  case \"anders\": return \"bg-gray-100 text-gray-800 border-gray-200\";\n                  default: return \"bg-muted text-muted-foreground border-border\";\n                }\n              };\n              \n              return (\n                <div\n                  key={item.id}\n                  className={`border rounded-lg p-4 ${getKindColor(item.kind || 'les')}`}\n                  data-testid={`schedule-item-${item.id}`}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <div className=\"flex items-center space-x-2 mb-1\">\n                        <h4 className=\"font-medium\">\n                          {item.title || course?.name || \"Activiteit\"}\n                        </h4>\n                        <span className=\"text-xs font-medium px-2 py-0.5 rounded bg-white/50\">\n                          {getKindLabel(item.kind || 'les')}\n                        </span>\n                      </div>\n                      {course && (\n                        <p className=\"text-sm opacity-75\">\n                          Vak: {course.name}\n                        </p>\n                      )}\n                    </div>\n                    <div className=\"text-right text-sm\">\n                      <div className=\"font-medium opacity-90\">\n                        {item.startTime && item.endTime && \n                          `${formatTime(item.startTime)} - ${formatTime(item.endTime)}`\n                        }\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        ) : (\n          <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"no-schedule\">\n            <p>Geen activiteiten vandaag</p>\n            <p className=\"text-sm mt-1\">Voeg activiteiten toe via het Rooster tabblad.</p>\n          </div>\n        )}\n      </section>\n\n      {/* App Introduction Modal */}\n      <AppIntroModal\n        open={showIntroModal}\n        onOpenChange={handleIntroModalClose}\n      />\n    </div>\n  );\n}\n","size_bytes":20004},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/lib/auth.tsx":{"content":"import * as React from \"react\";\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { User } from \"@supabase/supabase-js\";\nimport { supabase } from \"./supabase\";\n\ninterface AuthContextType {\n  user: User | null;\n  loading: boolean;\n  signIn: (email: string, password: string) => Promise<void>;\n  signUp: (\n    email: string, \n    password: string, \n    name: string, \n    role: \"student\" | \"parent\", \n    educationLevel?: string, \n    grade?: string\n  ) => Promise<void>;\n  signOut: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    supabase.auth.getSession().then(({ data: { session } }) => {\n      setUser(session?.user ?? null);\n      setLoading(false);\n    });\n\n    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {\n      setUser(session?.user ?? null);\n      setLoading(false);\n    });\n\n    return () => subscription.unsubscribe();\n  }, []);\n\n  const signIn = async (email: string, password: string) => {\n    // For development, use direct Supabase auth\n    const { error } = await supabase.auth.signInWithPassword({\n      email,\n      password,\n    });\n    if (error) throw error;\n  };\n\n  const signUp = async (\n    email: string, \n    password: string, \n    name: string, \n    role: \"student\" | \"parent\", \n    educationLevel?: string, \n    grade?: string\n  ) => {\n    // For development, use direct Supabase auth with extended data\n    const userData: any = { name, role };\n    if (role === 'student' && educationLevel && grade) {\n      userData.educationLevel = educationLevel;\n      userData.grade = grade;\n    }\n\n    const { error } = await supabase.auth.signUp({\n      email,\n      password,\n      options: {\n        data: userData\n      }\n    });\n    if (error) throw error;\n  };\n\n  const signOut = async () => {\n    // For development, use direct Supabase auth\n    const { error } = await supabase.auth.signOut();\n    if (error) throw error;\n  };\n\n  const value = {\n    user,\n    loading,\n    signIn,\n    signUp,\n    signOut,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}","size_bytes":2564},"server/db.ts":{"content":"import { createClient } from '@supabase/supabase-js';\nimport { drizzle } from 'drizzle-orm/postgres-js';\nimport postgres from 'postgres';\nimport * as schema from \"@shared/schema\";\n\nif (!process.env.SUPABASE_URL) {\n  throw new Error(\n    \"SUPABASE_URL must be set. Did you forget to configure Supabase?\",\n  );\n}\n\nif (!process.env.SUPABASE_SERVICE_ROLE_KEY) {\n  throw new Error(\n    \"SUPABASE_SERVICE_ROLE_KEY must be set. Did you forget to configure Supabase?\",\n  );\n}\n\n// Create Supabase client for auth and database operations\nexport const supabase = createClient(\n  process.env.SUPABASE_URL,\n  process.env.SUPABASE_SERVICE_ROLE_KEY\n);\n\n// Create postgres connection for Drizzle\n// Use DATABASE_URL which should point to the correct database\nconst connectionString = process.env.DATABASE_URL;\nif (!connectionString) {\n  throw new Error('DATABASE_URL must be set');\n}\n\nconst sql = postgres(connectionString);\nexport const db = drizzle(sql, { schema });\n\nconsole.log('‚úÖ Connected to Supabase database');\n","size_bytes":1005},"client/src/pages/ParentDashboard.tsx":{"content":"import * as React from \"react\";\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, User, Calendar, BookOpen, CheckCircle2, Info } from \"lucide-react\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport ParentIntroModal from \"@/components/ParentIntroModal\";\n\nexport default function ParentDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showAddChild, setShowAddChild] = useState(false);\n  const [showIntroModal, setShowIntroModal] = useState(false);\n  const [hasSeenIntro, setHasSeenIntro] = useState(false);\n  const [childData, setChildData] = useState({\n    email: \"\",\n    name: \"\",\n  });\n\n  // Check if this is the first time visiting the parent dashboard\n  React.useEffect(() => {\n    const hasSeenIntroKey = `hasSeenParentIntro_${user?.id}`;\n    const hasSeenBefore = localStorage.getItem(hasSeenIntroKey);\n    \n    if (!hasSeenBefore && user?.id) {\n      // First time visit - show intro automatically\n      setShowIntroModal(true);\n      setHasSeenIntro(false);\n    } else {\n      setHasSeenIntro(true);\n    }\n  }, [user?.id]);\n\n  // Handle intro modal close\n  const handleIntroModalClose = (open: boolean) => {\n    setShowIntroModal(open);\n    if (!open && user?.id) {\n      // Mark as seen when modal is closed\n      const hasSeenIntroKey = `hasSeenParentIntro_${user?.id}`;\n      localStorage.setItem(hasSeenIntroKey, 'true');\n      setHasSeenIntro(true);\n    }\n  };\n\n  // Fetch children relationships\n  const { data: children, isLoading } = useQuery({\n    queryKey: ['/api/parent', user?.id, 'children'],\n    enabled: !!user?.id,\n  });\n\n  // Add child mutation\n  const addChildMutation = useMutation({\n    mutationFn: async (childInfo: { childEmail: string; childName: string }) => {\n      return await apiRequest('POST', '/api/parent/add-child', {\n        parentId: user?.id,\n        childEmail: childInfo.childEmail,\n        childName: childInfo.childName,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Kind toegevoegd\",\n        description: \"Je kind ontvangt een bevestigingsverzoek.\",\n      });\n      setChildData({ email: \"\", name: \"\" });\n      setShowAddChild(false);\n      queryClient.invalidateQueries({ queryKey: ['/api/parent'] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Kon kind niet toevoegen\",\n        description: error.message || \"Controleer het emailadres en probeer opnieuw.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleAddChild = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!childData.email.trim() || !childData.name.trim()) {\n      toast({\n        title: \"Vul alle velden in\",\n        description: \"Voer zowel de naam als het emailadres van je kind in.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    addChildMutation.mutate({\n      childEmail: childData.email.trim(),\n      childName: childData.name.trim(),\n    });\n  };\n\n  const getStatusBadge = (isConfirmed: boolean) => {\n    return isConfirmed ? (\n      <Badge variant=\"default\" className=\"gap-1\">\n        <CheckCircle2 className=\"w-3 h-3\" />\n        Bevestigd\n      </Badge>\n    ) : (\n      <Badge variant=\"secondary\">\n        Wacht op bevestiging\n      </Badge>\n    );\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\" data-testid=\"parent-dashboard\">\n      <div>\n        <div className=\"flex items-center gap-3 mb-2\">\n          <h2 className=\"text-2xl font-semibold\">Mijn kinderen</h2>\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            className=\"h-8 w-8 p-0 text-muted-foreground hover:text-primary relative\"\n            onClick={() => setShowIntroModal(true)}\n            data-testid=\"button-parent-intro\"\n          >\n            <Info className=\"w-4 h-4\" />\n            {!hasSeenIntro && (\n              <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-primary rounded-full border-2 border-white animate-pulse\" />\n            )}\n          </Button>\n        </div>\n        <p className=\"text-muted-foreground\">\n          Voeg je kinderen toe om hun voortgang te volgen\n        </p>\n      </div>\n\n      {/* Add Child Section */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-lg\">Kind toevoegen</CardTitle>\n            {!showAddChild && (\n              <Button\n                onClick={() => setShowAddChild(true)}\n                size=\"sm\"\n                data-testid=\"button-add-child\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Voeg kind toe\n              </Button>\n            )}\n          </div>\n        </CardHeader>\n        \n        {showAddChild && (\n          <CardContent>\n            <form onSubmit={handleAddChild} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"child-name\">Naam van je kind</Label>\n                <Input\n                  id=\"child-name\"\n                  type=\"text\"\n                  value={childData.name}\n                  onChange={(e) => setChildData(prev => ({ ...prev, name: e.target.value }))}\n                  placeholder=\"Volledige naam\"\n                  required\n                  data-testid=\"input-child-name\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"child-email\">Emailadres van je kind</Label>\n                <Input\n                  id=\"child-email\"\n                  type=\"email\"\n                  value={childData.email}\n                  onChange={(e) => setChildData(prev => ({ ...prev, email: e.target.value }))}\n                  placeholder=\"kind@example.com\"\n                  required\n                  data-testid=\"input-child-email\"\n                />\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Dit moet het emailadres zijn waarmee je kind zich heeft geregistreerd\n                </p>\n              </div>\n              \n              <div className=\"flex gap-2\">\n                <Button\n                  type=\"submit\"\n                  disabled={addChildMutation.isPending}\n                  data-testid=\"button-submit-add-child\"\n                >\n                  {addChildMutation.isPending ? \"Bezig...\" : \"Toevoegen\"}\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => {\n                    setShowAddChild(false);\n                    setChildData({ email: \"\", name: \"\" });\n                  }}\n                  data-testid=\"button-cancel-add-child\"\n                >\n                  Annuleren\n                </Button>\n              </div>\n            </form>\n          </CardContent>\n        )}\n      </Card>\n\n      {/* Children List */}\n      <div className=\"space-y-4\">\n        {isLoading ? (\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"animate-spin w-6 h-6 border-2 border-primary border-t-transparent rounded-full mx-auto\" />\n              <p className=\"text-muted-foreground mt-2\">Kinderen laden...</p>\n            </CardContent>\n          </Card>\n        ) : children && Array.isArray(children) && children.length > 0 ? (\n          children.map((childData: any) => (\n            <Card key={childData.relationship.id}>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center\">\n                      <User className=\"w-6 h-6 text-primary\" />\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold\">{childData.relationship.childName}</h3>\n                      <p className=\"text-sm text-muted-foreground\">{childData.relationship.childEmail}</p>\n                      {childData.child && (\n                        <div className=\"flex items-center gap-2 mt-2 text-sm text-muted-foreground\">\n                          <BookOpen className=\"w-4 h-4\" />\n                          {childData.child.educationLevel?.toUpperCase()} - Klas {childData.child.grade}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    {getStatusBadge(childData.relationship.isConfirmed)}\n                  </div>\n                </div>\n                \n                {childData.relationship.isConfirmed && childData.child && (\n                  <div className=\"mt-4 pt-4 border-t flex gap-2\">\n                    <Button \n                      size=\"sm\" \n                      variant=\"outline\"\n                      onClick={() => {\n                        // TODO: Navigate to child's tasks view\n                        toast({\n                          title: \"Binnenkort beschikbaar\",\n                          description: \"Bekijk taken functionaliteit wordt nog ontwikkeld.\"\n                        });\n                      }}\n                    >\n                      <Calendar className=\"w-4 h-4 mr-2\" />\n                      Taken bekijken\n                    </Button>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          ))\n        ) : (\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <User className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"font-semibold mb-2\">Nog geen kinderen toegevoegd</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                Voeg je kinderen toe om hun huiswerk voortgang te volgen\n              </p>\n              <Button\n                onClick={() => setShowAddChild(true)}\n                data-testid=\"button-first-add-child\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Eerste kind toevoegen\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Parent Introduction Modal */}\n      <ParentIntroModal\n        open={showIntroModal}\n        onOpenChange={handleIntroModalClose}\n      />\n    </div>\n  );\n}","size_bytes":10690},"client/src/components/CalendarIntegration.tsx":{"content":"import * as React from \"react\";\nimport { useState } from \"react\";\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { useAuth } from '@/lib/auth';\nimport { queryClient, apiRequest } from '@/lib/queryClient';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Switch } from '@/components/ui/switch';\nimport { Badge } from '@/components/ui/badge';\nimport { Calendar, Link2, Unlink, RefreshCw, CheckCircle, XCircle, Clock } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface CalendarStatus {\n  connected: boolean;\n  syncEnabled: boolean;\n  lastSync: string | null;\n  provider: string | null;\n}\n\nexport default function CalendarIntegration() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [isConnecting, setIsConnecting] = useState(false);\n\n  // Get calendar status\n  const { data: calendarStatus, isLoading } = useQuery<CalendarStatus>({\n    queryKey: ['/api/calendar/status', user?.id],\n    enabled: !!user?.id,\n  });\n\n  // Connect calendar mutation\n  const connectMutation = useMutation({\n    mutationFn: async () => {\n      setIsConnecting(true);\n      return await apiRequest(`/api/calendar/connect/${user?.id}`);\n    },\n    onSuccess: (data: any) => {\n      // Redirect to Google OAuth\n      window.location.href = data.authUrl;\n    },\n    onError: (error) => {\n      setIsConnecting(false);\n      toast({\n        title: \"Fout bij koppelen\",\n        description: \"Kon de kalender koppeling niet starten. Probeer het opnieuw.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Disconnect calendar mutation\n  const disconnectMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(`/api/calendar/disconnect/${user?.id}`, 'POST');\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/calendar/status', user?.id] });\n      toast({\n        title: \"Kalender ontkoppeld\",\n        description: \"Je Google Calendar is succesvol ontkoppeld.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Fout bij ontkoppelen\",\n        description: \"Kon de kalender niet ontkoppelen. Probeer het opnieuw.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Manual sync mutation\n  const syncMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(`/api/calendar/sync/${user?.id}`, 'POST');\n    },\n    onSuccess: (result: any) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/calendar/status', user?.id] });\n      queryClient.invalidateQueries({ queryKey: ['/api/schedule', user?.id] });\n      \n      toast({\n        title: \"Sync voltooid\",\n        description: `${result.imported} activiteiten ge√Ømporteerd, ${result.skipped} overgeslagen`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Sync mislukt\",\n        description: \"Kon de kalender niet synchroniseren. Probeer het opnieuw.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <Card data-testid=\"calendar-loading\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Calendar className=\"w-5 h-5\" />\n            Google Calendar\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center justify-center py-4\">\n            <div className=\"animate-spin w-6 h-6 border-2 border-primary border-t-transparent rounded-full\" />\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const formatLastSync = (lastSync: string | null) => {\n    if (!lastSync) return 'Nog niet gesynchroniseerd';\n    const date = new Date(lastSync);\n    return `${date.toLocaleDateString('nl-NL')} om ${date.toLocaleTimeString('nl-NL', { hour: '2-digit', minute: '2-digit' })}`;\n  };\n\n  return (\n    <Card data-testid=\"calendar-integration\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Calendar className=\"w-5 h-5\" />\n          Google Calendar\n        </CardTitle>\n        <CardDescription>\n          Importeer automatisch afspraken uit je Google Calendar\n        </CardDescription>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        {/* Connection Status */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            {calendarStatus?.connected ? (\n              <>\n                <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                <span className=\"font-medium\">Gekoppeld</span>\n                <Badge variant=\"secondary\">{calendarStatus.provider}</Badge>\n              </>\n            ) : (\n              <>\n                <XCircle className=\"w-4 h-4 text-gray-400\" />\n                <span className=\"text-muted-foreground\">Niet gekoppeld</span>\n              </>\n            )}\n          </div>\n          \n          {calendarStatus?.connected ? (\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => disconnectMutation.mutate()}\n              disabled={disconnectMutation.isPending}\n              data-testid=\"button-disconnect-calendar\"\n            >\n              <Unlink className=\"w-4 h-4 mr-2\" />\n              Ontkoppelen\n            </Button>\n          ) : (\n            <Button \n              onClick={() => connectMutation.mutate()}\n              disabled={connectMutation.isPending || isConnecting}\n              data-testid=\"button-connect-calendar\"\n            >\n              <Link2 className=\"w-4 h-4 mr-2\" />\n              {isConnecting ? \"Koppelen...\" : \"Koppelen\"}\n            </Button>\n          )}\n        </div>\n\n        {/* Last Sync Info */}\n        {calendarStatus?.connected && (\n          <div className=\"space-y-3 pt-2 border-t\">\n            <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n              <Clock className=\"w-4 h-4\" />\n              <span>Laatste sync: {formatLastSync(calendarStatus.lastSync)}</span>\n            </div>\n            \n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => syncMutation.mutate()}\n              disabled={syncMutation.isPending}\n              data-testid=\"button-sync-calendar\"\n            >\n              <RefreshCw className={`w-4 h-4 mr-2 ${syncMutation.isPending ? 'animate-spin' : ''}`} />\n              {syncMutation.isPending ? \"Synchroniseren...\" : \"Nu synchroniseren\"}\n            </Button>\n            \n            <div className=\"text-xs text-muted-foreground bg-muted p-2 rounded\">\n              üí° Je kalender wordt automatisch elke dag om 6:00 gesynchroniseerd\n            </div>\n          </div>\n        )}\n\n        {/* Help Text */}\n        {!calendarStatus?.connected && (\n          <div className=\"text-sm text-muted-foreground bg-blue-50 p-3 rounded border border-blue-200\">\n            <p className=\"font-medium mb-1\">Wat gebeurt er als je koppelt?</p>\n            <ul className=\"space-y-1 text-xs\">\n              <li>‚Ä¢ Afspraken uit je Google Calendar worden automatisch ge√Ømporteerd</li>\n              <li>‚Ä¢ We herkennen sport, werk, school en andere activiteiten</li>\n              <li>‚Ä¢ Dagelijkse sync om 6:00 's ochtends</li>\n              <li>‚Ä¢ Alleen lezen - we wijzigen niets in je Google Calendar</li>\n            </ul>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7492},"server/calendarImport.ts":{"content":"import { GoogleCalendarService } from './googleCalendar';\nimport { storage } from './storage';\nimport type { CalendarIntegration, InsertSchedule, InsertImportedEvent } from '@shared/schema';\n\nexport class CalendarImportService {\n  private googleCalendar: GoogleCalendarService;\n\n  constructor() {\n    this.googleCalendar = new GoogleCalendarService();\n  }\n\n  // Import events for a specific user\n  async importEventsForUser(userId: string): Promise<{\n    imported: number;\n    skipped: number;\n    errors: string[];\n  }> {\n    const results = {\n      imported: 0,\n      skipped: 0,\n      errors: [] as string[]\n    };\n\n    try {\n      // Get user's calendar integration\n      const integration = await storage.getCalendarIntegration(userId);\n      if (!integration || !integration.syncEnabled) {\n        results.errors.push('No calendar integration found or sync disabled');\n        return results;\n      }\n\n      // Refresh token if needed\n      const refreshedIntegration = await this.googleCalendar.refreshTokenIfNeeded(integration);\n      if (!refreshedIntegration) {\n        results.errors.push('Failed to refresh calendar tokens');\n        return results;\n      }\n\n      // Update tokens if they were refreshed\n      if (refreshedIntegration !== integration) {\n        await storage.updateCalendarIntegration(userId, {\n          accessToken: refreshedIntegration.accessToken,\n          tokenExpires: refreshedIntegration.tokenExpires,\n        });\n      }\n\n      // Set credentials and get events\n      this.googleCalendar.setCredentials(refreshedIntegration);\n      const calendarId = integration.calendarId || await this.googleCalendar.getPrimaryCalendarId();\n      const googleEvents = await this.googleCalendar.getEvents(calendarId, 14); // Import 2 weeks ahead\n\n      console.log(`Found ${googleEvents.length} Google Calendar events for user ${userId}`);\n\n      // Process each event\n      for (const googleEvent of googleEvents) {\n        try {\n          // Skip events without ID\n          if (!googleEvent.id) {\n            results.skipped++;\n            continue;\n          }\n\n          // Check if already imported\n          const existingImport = await storage.getImportedEvent(userId, googleEvent.id);\n          if (existingImport) {\n            // Check if event was updated\n            const eventUpdated = new Date(googleEvent.updated || googleEvent.created);\n            const lastImported = existingImport.lastModified || new Date(0);\n            \n            if (eventUpdated <= lastImported) {\n              results.skipped++;\n              continue; // Event hasn't changed, skip\n            }\n          }\n\n          // Convert Google event to Anouk schedule format\n          const scheduleData = this.googleCalendar.convertEventToSchedule(googleEvent, userId);\n          \n          // Create or update schedule item\n          const scheduleItem = await storage.createScheduleItem(scheduleData);\n\n          // Create or update imported event record\n          const importedEventData = this.googleCalendar.createImportedEventRecord(\n            googleEvent, \n            scheduleItem.id, \n            userId\n          );\n\n          if (existingImport) {\n            // Update existing import record (we'd need an update method)\n            // For now, we'll skip updating existing records\n            results.skipped++;\n          } else {\n            await storage.createImportedEvent(importedEventData);\n            results.imported++;\n          }\n\n          console.log(`Imported: ${googleEvent.summary} (${scheduleData.kind})`);\n\n        } catch (eventError) {\n          console.error(`Error processing event ${googleEvent.id}:`, eventError);\n          results.errors.push(`Event ${googleEvent.summary || googleEvent.id}: ${eventError}`);\n        }\n      }\n\n      // Update last sync time\n      await storage.updateCalendarIntegration(userId, {\n        lastSyncAt: new Date()\n      });\n\n      console.log(`Import complete for user ${userId}: ${results.imported} imported, ${results.skipped} skipped`);\n\n    } catch (error) {\n      console.error(`Calendar import failed for user ${userId}:`, error);\n      results.errors.push(`Import failed: ${error}`);\n    }\n\n    return results;\n  }\n\n  // Import for all users with enabled calendar sync\n  async importForAllUsers(): Promise<void> {\n    try {\n      // Note: We'd need to add a method to get all users with calendar integrations\n      // For now, this is a placeholder for the cron job\n      console.log('Running calendar import for all users...');\n      \n      // This would iterate through all users with calendar integrations enabled\n      // and call importEventsForUser for each\n      \n    } catch (error) {\n      console.error('Batch calendar import failed:', error);\n    }\n  }\n\n  // Test import for a user (useful for debugging)\n  async testImport(userId: string): Promise<any> {\n    console.log(`Testing calendar import for user ${userId}`);\n    return await this.importEventsForUser(userId);\n  }\n}\n\nexport const calendarImporter = new CalendarImportService();","size_bytes":5044},"server/cronJobs.ts":{"content":"import cron from 'node-cron';\nimport { calendarImporter } from './calendarImport';\nimport { storage } from './storage';\n\nexport class CronJobManager {\n  private isRunning = false;\n\n  // Start all scheduled jobs\n  start() {\n    if (this.isRunning) {\n      console.log('Cron jobs already running');\n      return;\n    }\n\n    // Daily calendar sync at 6:00 AM\n    cron.schedule('0 6 * * *', async () => {\n      console.log('üîÑ Starting daily calendar import...');\n      await this.runCalendarSync();\n    }, {\n      timezone: \"Europe/Amsterdam\"\n    });\n\n    // Test sync every 10 minutes (for development - remove in production)\n    if (process.env.NODE_ENV === 'development') {\n      cron.schedule('*/10 * * * *', async () => {\n        console.log('üß™ Running test calendar sync (dev mode)...');\n        await this.runCalendarSync();\n      }, {\n        timezone: \"Europe/Amsterdam\"\n      });\n    }\n\n    this.isRunning = true;\n    console.log('‚úÖ Cron jobs started');\n    console.log('üìÖ Daily calendar sync: 6:00 AM CET');\n    if (process.env.NODE_ENV === 'development') {\n      console.log('üß™ Test sync: Every 10 minutes (dev mode)');\n    }\n  }\n\n  // Stop all scheduled jobs\n  stop() {\n    cron.getTasks().forEach(task => task.stop());\n    this.isRunning = false;\n    console.log('‚ùå Cron jobs stopped');\n  }\n\n  // Get all users with calendar integrations enabled\n  private async getUsersWithCalendarSync(): Promise<string[]> {\n    try {\n      // Note: We'd need a method to get all users with calendar integrations\n      // For now, we'll implement a basic version\n      // TODO: Add getAllCalendarIntegrations method to storage\n      \n      // Placeholder - in a real implementation we'd query the database\n      return [];\n    } catch (error) {\n      console.error('Failed to get users with calendar sync:', error);\n      return [];\n    }\n  }\n\n  // Run calendar sync for all enabled users\n  private async runCalendarSync(): Promise<void> {\n    try {\n      const userIds = await this.getUsersWithCalendarSync();\n      \n      if (userIds.length === 0) {\n        console.log('üì≠ No users with calendar sync enabled');\n        return;\n      }\n\n      console.log(`üì• Syncing calendars for ${userIds.length} users`);\n      \n      let totalImported = 0;\n      let totalErrors = 0;\n\n      // Process users sequentially to avoid rate limits\n      for (const userId of userIds) {\n        try {\n          const result = await calendarImporter.importEventsForUser(userId);\n          totalImported += result.imported;\n          totalErrors += result.errors.length;\n          \n          if (result.imported > 0) {\n            console.log(`‚úÖ User ${userId}: ${result.imported} events imported`);\n          }\n          \n          if (result.errors.length > 0) {\n            console.log(`‚ö†Ô∏è User ${userId}: ${result.errors.length} errors`);\n          }\n\n          // Small delay to be nice to Google's API\n          await new Promise(resolve => setTimeout(resolve, 1000));\n          \n        } catch (userError) {\n          console.error(`‚ùå Failed to sync calendar for user ${userId}:`, userError);\n          totalErrors++;\n        }\n      }\n\n      console.log(`üìä Calendar sync complete: ${totalImported} total imported, ${totalErrors} errors`);\n      \n    } catch (error) {\n      console.error('‚ùå Calendar sync job failed:', error);\n    }\n  }\n\n  // Manual trigger for calendar sync (useful for testing)\n  async triggerCalendarSync(): Promise<void> {\n    console.log('üöÄ Manually triggering calendar sync...');\n    await this.runCalendarSync();\n  }\n\n  // Get status of cron jobs\n  getStatus() {\n    return {\n      running: this.isRunning,\n      tasks: cron.getTasks().size,\n      nextRuns: Array.from(cron.getTasks().values()).map(task => ({\n        running: task.running,\n        // Note: Getting next run time would require additional cron package features\n      }))\n    };\n  }\n}\n\nexport const cronManager = new CronJobManager();","size_bytes":3944},"server/googleCalendar.ts":{"content":"import { google } from 'googleapis';\nimport { OAuth2Client } from 'google-auth-library';\nimport type { CalendarIntegration, InsertCalendarIntegration, InsertSchedule, InsertImportedEvent } from '@shared/schema';\n\nconst CLIENT_ID = process.env.GOOGLE_CLIENT_ID;\nconst CLIENT_SECRET = process.env.GOOGLE_CLIENT_SECRET;\nconst REDIRECT_URI = process.env.GOOGLE_REDIRECT_URI || 'http://localhost:5000/api/calendar/callback';\n\nif (!CLIENT_ID || !CLIENT_SECRET) {\n  console.warn('Google Calendar credentials not configured. Set GOOGLE_CLIENT_ID and GOOGLE_CLIENT_SECRET environment variables.');\n}\n\nexport class GoogleCalendarService {\n  private oauth2Client: OAuth2Client;\n  \n  constructor() {\n    this.oauth2Client = new OAuth2Client(CLIENT_ID, CLIENT_SECRET, REDIRECT_URI);\n  }\n\n  // Get OAuth authorization URL\n  getAuthUrl(userId: string): string {\n    const scopes = [\n      'https://www.googleapis.com/auth/calendar.readonly'\n    ];\n\n    return this.oauth2Client.generateAuthUrl({\n      access_type: 'offline',\n      scope: scopes,\n      state: userId, // Pass userId to identify user after redirect\n    });\n  }\n\n  // Exchange authorization code for tokens\n  async getTokensFromCode(code: string): Promise<{\n    access_token: string;\n    refresh_token?: string;\n    expiry_date?: number;\n  }> {\n    const { tokens } = await this.oauth2Client.getToken(code);\n    return {\n      access_token: tokens.access_token || '',\n      refresh_token: tokens.refresh_token || undefined,\n      expiry_date: tokens.expiry_date || undefined,\n    };\n  }\n\n  // Set credentials for API calls\n  setCredentials(integration: CalendarIntegration) {\n    this.oauth2Client.setCredentials({\n      access_token: integration.accessToken,\n      refresh_token: integration.refreshToken,\n      expiry_date: integration.tokenExpires ? new Date(integration.tokenExpires).getTime() : undefined,\n    });\n  }\n\n  // Refresh access token if needed\n  async refreshTokenIfNeeded(integration: CalendarIntegration): Promise<CalendarIntegration | null> {\n    if (!integration.refreshToken) return null;\n    \n    const now = new Date();\n    const expiryTime = integration.tokenExpires ? new Date(integration.tokenExpires) : new Date(0);\n    \n    // Refresh if token expires within next 5 minutes\n    if (expiryTime.getTime() - now.getTime() > 5 * 60 * 1000) {\n      return integration; // Token still valid\n    }\n\n    try {\n      this.oauth2Client.setCredentials({\n        refresh_token: integration.refreshToken,\n      });\n      \n      const { credentials } = await this.oauth2Client.refreshAccessToken();\n      \n      return {\n        ...integration,\n        accessToken: credentials.access_token || integration.accessToken,\n        tokenExpires: credentials.expiry_date ? new Date(credentials.expiry_date) : integration.tokenExpires,\n      };\n    } catch (error) {\n      console.error('Failed to refresh token:', error);\n      return null;\n    }\n  }\n\n  // Get user's primary calendar ID\n  async getPrimaryCalendarId(): Promise<string> {\n    const calendar = google.calendar({ version: 'v3', auth: this.oauth2Client });\n    const response = await calendar.calendarList.list();\n    \n    const primaryCalendar = response.data.items?.find(cal => cal.primary);\n    return primaryCalendar?.id || 'primary';\n  }\n\n  // Get events from Google Calendar\n  async getEvents(calendarId: string = 'primary', daysAhead: number = 7): Promise<any[]> {\n    try {\n      const calendar = google.calendar({ version: 'v3', auth: this.oauth2Client });\n      \n      const timeMin = new Date();\n      const timeMax = new Date();\n      timeMax.setDate(timeMax.getDate() + daysAhead);\n\n      const response = await calendar.events.list({\n        calendarId,\n        timeMin: timeMin.toISOString(),\n        timeMax: timeMax.toISOString(),\n        singleEvents: true,\n        orderBy: 'startTime',\n        maxResults: 250,\n      });\n\n      return response.data.items || [];\n    } catch (error) {\n      console.error('Failed to fetch Google Calendar events:', error);\n      throw error;\n    }\n  }\n\n  // Convert Google Calendar event to Anouk schedule format\n  convertEventToSchedule(event: any, userId: string): InsertSchedule {\n    const start = event.start?.dateTime || event.start?.date;\n    const end = event.end?.dateTime || event.end?.date;\n    \n    // Parse dates\n    const startDate = new Date(start);\n    const endDate = new Date(end);\n    \n    // Determine activity type based on event summary and description\n    const title = event.summary || 'Google Calendar Event';\n    const description = event.description || '';\n    const kind = this.categorizeEvent(title, description);\n    \n    // For all-day events, don't set times\n    const isAllDay = !event.start?.dateTime;\n    \n    return {\n      userId,\n      courseId: null, // We don't auto-assign courses\n      dayOfWeek: isAllDay ? null : startDate.getDay() || 7, // Convert 0=Sunday to 7\n      startTime: isAllDay ? null : this.formatTime(startDate),\n      endTime: isAllDay ? null : this.formatTime(endDate),\n      kind,\n      title,\n      date: isAllDay ? this.formatDate(startDate) : null, // All-day events use date field\n      isRecurring: this.isRecurringEvent(event),\n    };\n  }\n\n  // Smart categorization of Google Calendar events\n  private categorizeEvent(title: string, description: string): \"les\" | \"toets\" | \"sport\" | \"werk\" | \"afspraak\" | \"hobby\" | \"anders\" {\n    const text = `${title} ${description}`.toLowerCase();\n    \n    // Sports keywords\n    if (text.match(/\\b(sport|training|hockey|voetbal|tennis|fitness|gym|zwemmen|hardlopen|basketbal|volleyball)\\b/)) {\n      return 'sport';\n    }\n    \n    // Work keywords  \n    if (text.match(/\\b(werk|job|bijbaan|stage|werken|dienst|shift)\\b/)) {\n      return 'werk';\n    }\n    \n    // School keywords\n    if (text.match(/\\b(les|school|toets|tentamen|examen|college|universiteit|klas)\\b/)) {\n      return text.match(/\\b(toets|tentamen|examen)\\b/) ? 'toets' : 'les';\n    }\n    \n    // Appointment keywords\n    if (text.match(/\\b(afspraak|dokter|tandarts|kappers|consult|behandeling)\\b/)) {\n      return 'afspraak';\n    }\n    \n    // Hobby keywords\n    if (text.match(/\\b(muziek|band|koor|theater|kunst|cursus|hobby)\\b/)) {\n      return 'hobby';\n    }\n    \n    // Default to \"anders\"\n    return 'anders';\n  }\n\n  private isRecurringEvent(event: any): boolean {\n    return !!event.recurringEventId || !!event.recurrence;\n  }\n\n  private formatTime(date: Date): string {\n    return date.toLocaleTimeString('nl-NL', { \n      hour: '2-digit', \n      minute: '2-digit',\n      hour12: false \n    });\n  }\n\n  private formatDate(date: Date): string {\n    return date.toISOString().split('T')[0]; // YYYY-MM-DD format\n  }\n\n  // Create imported event record to prevent duplicates\n  createImportedEventRecord(event: any, scheduleId: string, userId: string): InsertImportedEvent {\n    return {\n      userId,\n      scheduleId,\n      externalId: event.id,\n      provider: 'google',\n      lastModified: event.updated ? new Date(event.updated) : new Date(),\n    };\n  }\n}","size_bytes":7002},"client/src/components/AppIntroModal.tsx":{"content":"import { useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  Mic,\n  Calendar,\n  Plus,\n  HelpCircle,\n  Settings,\n  CheckCircle,\n  Clock,\n  BookOpen,\n  Users,\n  Smartphone,\n  ChevronLeft,\n  ChevronRight,\n} from \"lucide-react\";\n\ninterface AppIntroModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nconst introSteps = [\n  {\n    title: \"Welkom bij Huiswerkcoach Noukie! üëã\",\n    content: (\n      <div className=\"space-y-4\">\n        <p className=\"text-muted-foreground\">\n          Ik ben je persoonlijke huiswerkcoach en help je elke dag om je huiswerk goed te plannen en uit te voeren.\n        </p>\n        <div className=\"bg-purple-50 p-4 rounded-lg\">\n          <h4 className=\"font-semibold text-purple-800 mb-2\">Wat kan ik voor je doen?</h4>\n          <ul className=\"space-y-2 text-sm text-purple-700\">\n            <li className=\"flex items-center gap-2\">\n              <CheckCircle className=\"w-4 h-4\" />\n              Dagelijkse voice check-ins voor takenplanning\n            </li>\n            <li className=\"flex items-center gap-2\">\n              <CheckCircle className=\"w-4 h-4\" />\n              Huiswerkuitleg met foto's en stap-voor-stap hulp\n            </li>\n            <li className=\"flex items-center gap-2\">\n              <CheckCircle className=\"w-4 h-4\" />\n              Slimme roosterplanning en herinneringen\n            </li>\n            <li className=\"flex items-center gap-2\">\n              <CheckCircle className=\"w-4 h-4\" />\n              Ouders kunnen je voortgang volgen\n            </li>\n          </ul>\n        </div>\n      </div>\n    ),\n  },\n  {\n    title: \"üéôÔ∏è Vandaag Tab - Je Dagelijkse Check-in\",\n    content: (\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center gap-3 p-3 bg-blue-50 rounded-lg\">\n          <Mic className=\"w-8 h-8 text-blue-600\" />\n          <div>\n            <h4 className=\"font-semibold text-blue-800\">Voice Check-ins</h4>\n            <p className=\"text-sm text-blue-600\">\n              Vertel elke dag wat je hebt gedaan en wat er nog moet gebeuren\n            </p>\n          </div>\n        </div>\n        \n        <div className=\"space-y-3\">\n          <h4 className=\"font-semibold\">Hoe werkt het?</h4>\n          <div className=\"space-y-2 text-sm\">\n            <div className=\"flex items-start gap-3\">\n              <Badge variant=\"outline\" className=\"mt-1\">1</Badge>\n              <p>Klik op de microfoon en vertel over je dag</p>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <Badge variant=\"outline\" className=\"mt-1\">2</Badge>\n              <p>Ik maak automatisch taken aan van wat je zegt</p>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <Badge variant=\"outline\" className=\"mt-1\">3</Badge>\n              <p>Je ziet je prioriteiten en planning voor vandaag</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    ),\n  },\n  {\n    title: \"üìÖ Rooster Tab - Je Planning Overzicht\",\n    content: (\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center gap-3 p-3 bg-green-50 rounded-lg\">\n          <Calendar className=\"w-8 h-8 text-green-600\" />\n          <div>\n            <h4 className=\"font-semibold text-green-800\">Wekelijks Overzicht</h4>\n            <p className=\"text-sm text-green-600\">\n              Alle taken, toetsen en deadlines in √©√©n overzicht\n            </p>\n          </div>\n        </div>\n        \n        <div className=\"space-y-3\">\n          <h4 className=\"font-semibold\">Handige functies:</h4>\n          <ul className=\"space-y-2 text-sm\">\n            <li className=\"flex items-center gap-2\">\n              <CheckCircle className=\"w-4 h-4 text-green-600\" />\n              Taken afvinken als je ze af hebt\n            </li>\n            <li className=\"flex items-center gap-2\">\n              <CheckCircle className=\"w-4 h-4 text-green-600\" />\n              Prioriteit aanpassen (hoog, normaal, laag)\n            </li>\n            <li className=\"flex items-center gap-2\">\n              <CheckCircle className=\"w-4 h-4 text-green-600\" />\n              Deadline bijhouden voor belangrijke dingen\n            </li>\n          </ul>\n        </div>\n      </div>\n    ),\n  },\n  {\n    title: \"‚ûï Toevoegen Tab - Handmatig Invoeren\",\n    content: (\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center gap-3 p-3 bg-orange-50 rounded-lg\">\n          <Plus className=\"w-8 h-8 text-orange-600\" />\n          <div>\n            <h4 className=\"font-semibold text-orange-800\">Rooster & Taken</h4>\n            <p className=\"text-sm text-orange-600\">\n              Voeg lessen, toetsen en huiswerk handmatig toe\n            </p>\n          </div>\n        </div>\n        \n        <div className=\"space-y-3\">\n          <h4 className=\"font-semibold\">Wat kun je toevoegen?</h4>\n          <div className=\"grid grid-cols-2 gap-3 text-sm\">\n            <div className=\"p-2 bg-gray-50 rounded\">\n              <h5 className=\"font-medium\">üìö Lessen</h5>\n              <p className=\"text-xs text-muted-foreground\">Wiskunde, Nederlands, etc.</p>\n            </div>\n            <div className=\"p-2 bg-gray-50 rounded\">\n              <h5 className=\"font-medium\">üìù Toetsen</h5>\n              <p className=\"text-xs text-muted-foreground\">Met datum en tijd</p>\n            </div>\n            <div className=\"p-2 bg-gray-50 rounded\">\n              <h5 className=\"font-medium\">üìã Huiswerk</h5>\n              <p className=\"text-xs text-muted-foreground\">Taken en opdrachten</p>\n            </div>\n            <div className=\"p-2 bg-gray-50 rounded\">\n              <h5 className=\"font-medium\">‚öΩ Activiteiten</h5>\n              <p className=\"text-xs text-muted-foreground\">Sport, hobby's, etc.</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    ),\n  },\n  {\n    title: \"‚ùì Uitleg Tab - Je Huiswerkassistent\",\n    content: (\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center gap-3 p-3 bg-purple-50 rounded-lg\">\n          <HelpCircle className=\"w-8 h-8 text-purple-600\" />\n          <div>\n            <h4 className=\"font-semibold text-purple-800\">OCR + AI Hulp</h4>\n            <p className=\"text-sm text-purple-600\">\n              Maak een foto van je huiswerk en krijg uitleg\n            </p>\n          </div>\n        </div>\n        \n        <div className=\"space-y-3\">\n          <h4 className=\"font-semibold\">Hoe gebruik je dit?</h4>\n          <div className=\"space-y-2 text-sm\">\n            <div className=\"flex items-start gap-3\">\n              <Badge variant=\"outline\" className=\"mt-1\">1</Badge>\n              <p>Maak een foto van je huiswerk of upload een PDF</p>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <Badge variant=\"outline\" className=\"mt-1\">2</Badge>\n              <p>Ik lees de tekst en begrijp de vraag</p>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <Badge variant=\"outline\" className=\"mt-1\">3</Badge>\n              <p>Je krijgt stap-voor-stap uitleg en voorbeelden</p>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <Badge variant=\"outline\" className=\"mt-1\">4</Badge>\n              <p>Test jezelf met een kleine quiz</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    ),\n  },\n  {\n    title: \"‚öôÔ∏è Instellingen Tab - Maak Het Jouw App\",\n    content: (\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center gap-3 p-3 bg-gray-50 rounded-lg\">\n          <Settings className=\"w-8 h-8 text-gray-600\" />\n          <div>\n            <h4 className=\"font-semibold text-gray-800\">Personalisatie</h4>\n            <p className=\"text-sm text-gray-600\">\n              Stel de app in zoals jij het fijn vindt\n            </p>\n          </div>\n        </div>\n        \n        <div className=\"grid grid-cols-2 gap-3 text-sm\">\n          <div className=\"space-y-2\">\n            <h5 className=\"font-medium\">üé® App Kleuren</h5>\n            <p className=\"text-xs text-muted-foreground\">Paars, blauw, groen of roze</p>\n          </div>\n          <div className=\"space-y-2\">\n            <h5 className=\"font-medium\">üìö Jaargang</h5>\n            <p className=\"text-xs text-muted-foreground\">VMBO, HAVO, VWO, MBO</p>\n          </div>\n          <div className=\"space-y-2\">\n            <h5 className=\"font-medium\">üîî Meldingen</h5>\n            <p className=\"text-xs text-muted-foreground\">Dagelijkse herinneringen</p>\n          </div>\n          <div className=\"space-y-2\">\n            <h5 className=\"font-medium\">üìÖ Import</h5>\n            <p className=\"text-xs text-muted-foreground\">iCal rooster import</p>\n          </div>\n        </div>\n      </div>\n    ),\n  },\n  {\n    title: \"üí° Tips voor Optimaal Gebruik\",\n    content: (\n      <div className=\"space-y-4\">\n        <div className=\"space-y-3\">\n          <div className=\"p-3 bg-yellow-50 rounded-lg\">\n            <h4 className=\"font-semibold text-yellow-800 mb-2\">üåÖ Begin je dag goed</h4>\n            <p className=\"text-sm text-yellow-700\">\n              Doe elke ochtend een voice check-in. Vertel wat je gisteren hebt gedaan en wat je vandaag wilt bereiken.\n            </p>\n          </div>\n          \n          <div className=\"p-3 bg-blue-50 rounded-lg\">\n            <h4 className=\"font-semibold text-blue-800 mb-2\">üì± Gebruik foto's</h4>\n            <p className=\"text-sm text-blue-700\">\n              Als je ergens niet uitkomt, maak een foto van de opdracht. Ik geef je dan stap-voor-stap uitleg.\n            </p>\n          </div>\n          \n          <div className=\"p-3 bg-indigo-50 rounded-lg\">\n            <h4 className=\"font-semibold text-indigo-800 mb-2\">üìÖ SomToday rooster</h4>\n            <p className=\"text-sm text-indigo-700\">\n              Gebruik je SomToday? Exporteer je rooster als iCal URL en importeer het in √©√©n keer via het Rooster tabblad!\n            </p>\n          </div>\n          \n          <div className=\"p-3 bg-green-50 rounded-lg\">\n            <h4 className=\"font-semibold text-green-800 mb-2\">üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Betrek je ouders</h4>\n            <p className=\"text-sm text-green-700\">\n              Je ouders kunnen een eigen account maken om je voortgang te volgen. Vraag het ze!\n            </p>\n          </div>\n          \n          <div className=\"p-3 bg-purple-50 rounded-lg\">\n            <h4 className=\"font-semibold text-purple-800 mb-2\">üîÑ Wees consistent</h4>\n            <p className=\"text-sm text-purple-700\">\n              Hoe meer je de app gebruikt, hoe beter ik je kan helpen. Probeer het elke dag even te checken.\n            </p>\n          </div>\n        </div>\n      </div>\n    ),\n  },\n];\n\nexport default function AppIntroModal({ open, onOpenChange }: AppIntroModalProps) {\n  const [currentStep, setCurrentStep] = useState(0);\n\n  const nextStep = () => {\n    if (currentStep < introSteps.length - 1) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const prevStep = () => {\n    if (currentStep > 0) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const handleClose = () => {\n    setCurrentStep(0);\n    onOpenChange(false);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-md max-h-[80vh] overflow-y-auto\" data-testid=\"app-intro-modal\">\n        <DialogHeader>\n          <DialogTitle className=\"text-center\">\n            {introSteps[currentStep].title}\n          </DialogTitle>\n          <DialogDescription className=\"text-center\">\n            Stap {currentStep + 1} van {introSteps.length}\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"py-4\">\n          {introSteps[currentStep].content}\n        </div>\n\n        <Separator />\n\n        <div className=\"flex items-center justify-between pt-4\">\n          <Button\n            variant=\"outline\"\n            onClick={prevStep}\n            disabled={currentStep === 0}\n            className=\"flex items-center gap-2\"\n            data-testid=\"button-prev-step\"\n          >\n            <ChevronLeft className=\"w-4 h-4\" />\n            Vorige\n          </Button>\n\n          <div className=\"flex gap-2\">\n            {introSteps.map((_, index) => (\n              <div\n                key={index}\n                className={`w-2 h-2 rounded-full transition-colors ${\n                  index === currentStep ? 'bg-primary' : 'bg-muted'\n                }`}\n              />\n            ))}\n          </div>\n\n          {currentStep < introSteps.length - 1 ? (\n            <Button\n              onClick={nextStep}\n              className=\"flex items-center gap-2\"\n              data-testid=\"button-next-step\"\n            >\n              Volgende\n              <ChevronRight className=\"w-4 h-4\" />\n            </Button>\n          ) : (\n            <Button\n              onClick={handleClose}\n              className=\"flex items-center gap-2\"\n              data-testid=\"button-close-intro\"\n            >\n              Start!\n              <CheckCircle className=\"w-4 h-4\" />\n            </Button>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":13324},"client/src/components/ParentIntroModal.tsx":{"content":"import { useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  Users,\n  Eye,\n  Calendar,\n  BookOpen,\n  TrendingUp,\n  Bell,\n  Heart,\n  CheckCircle,\n  ChevronLeft,\n  ChevronRight,\n  UserPlus,\n} from \"lucide-react\";\n\ninterface ParentIntroModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nconst parentIntroSteps = [\n  {\n    title: \"Welkom Ouder! üë®‚Äçüë©‚Äçüëß‚Äçüë¶\",\n    content: (\n      <div className=\"space-y-4\">\n        <p className=\"text-muted-foreground\">\n          Fijn dat je meedoet! Als ouder kun je je kind ondersteunen door hun voortgang te volgen en inzicht te krijgen in hun huiswerkgewoonten.\n        </p>\n        <div className=\"bg-blue-50 p-4 rounded-lg\">\n          <h4 className=\"font-semibold text-blue-800 mb-2\">Wat kun je als ouder doen?</h4>\n          <ul className=\"space-y-2 text-sm text-blue-700\">\n            <li className=\"flex items-center gap-2\">\n              <CheckCircle className=\"w-4 h-4\" />\n              Je kind koppelen aan jouw account\n            </li>\n            <li className=\"flex items-center gap-2\">\n              <CheckCircle className=\"w-4 h-4\" />\n              Huiswerk voortgang bekijken\n            </li>\n            <li className=\"flex items-center gap-2\">\n              <CheckCircle className=\"w-4 h-4\" />\n              Komende toetsen en deadlines zien\n            </li>\n            <li className=\"flex items-center gap-2\">\n              <CheckCircle className=\"w-4 h-4\" />\n              Inzicht in dagelijkse check-ins\n            </li>\n          </ul>\n        </div>\n      </div>\n    ),\n  },\n  {\n    title: \"üë• Je Kind Koppelen\",\n    content: (\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center gap-3 p-3 bg-green-50 rounded-lg\">\n          <UserPlus className=\"w-8 h-8 text-green-600\" />\n          <div>\n            <h4 className=\"font-semibold text-green-800\">Account Koppeling</h4>\n            <p className=\"text-sm text-green-600\">\n              Verbind met het account van je kind\n            </p>\n          </div>\n        </div>\n        \n        <div className=\"space-y-3\">\n          <h4 className=\"font-semibold\">Hoe werkt het koppelen?</h4>\n          <div className=\"space-y-2 text-sm\">\n            <div className=\"flex items-start gap-3\">\n              <Badge variant=\"outline\" className=\"mt-1\">1</Badge>\n              <p>Vul de email van je kind in bij \"Kind Toevoegen\"</p>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <Badge variant=\"outline\" className=\"mt-1\">2</Badge>\n              <p>Je kind krijgt een notificatie om jou te bevestigen</p>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <Badge variant=\"outline\" className=\"mt-1\">3</Badge>\n              <p>Na bevestiging zie je hun voortgang hier</p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-orange-50 p-3 rounded-lg\">\n          <p className=\"text-sm text-orange-800\">\n            üí° <strong>Tip:</strong> Je kind heeft controle en moet jou eerst bevestigen voor privacy.\n          </p>\n        </div>\n      </div>\n    ),\n  },\n  {\n    title: \"üìä Voortgang Bekijken\",\n    content: (\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center gap-3 p-3 bg-purple-50 rounded-lg\">\n          <TrendingUp className=\"w-8 h-8 text-purple-600\" />\n          <div>\n            <h4 className=\"font-semibold text-purple-800\">Inzicht & Overzicht</h4>\n            <p className=\"text-sm text-purple-600\">\n              Volg hoe je kind het doet met huiswerk\n            </p>\n          </div>\n        </div>\n        \n        <div className=\"space-y-3\">\n          <h4 className=\"font-semibold\">Wat zie je allemaal?</h4>\n          <div className=\"grid grid-cols-2 gap-3 text-sm\">\n            <div className=\"p-2 bg-gray-50 rounded\">\n              <h5 className=\"font-medium\">‚úÖ Voltooide Taken</h5>\n              <p className=\"text-xs text-muted-foreground\">Afgevinkte huiswerk</p>\n            </div>\n            <div className=\"p-2 bg-gray-50 rounded\">\n              <h5 className=\"font-medium\">‚è∞ Komende Toetsen</h5>\n              <p className=\"text-xs text-muted-foreground\">Belangrijke deadlines</p>\n            </div>\n            <div className=\"p-2 bg-gray-50 rounded\">\n              <h5 className=\"font-medium\">üéôÔ∏è Voice Check-ins</h5>\n              <p className=\"text-xs text-muted-foreground\">Dagelijkse reflecties</p>\n            </div>\n            <div className=\"p-2 bg-gray-50 rounded\">\n              <h5 className=\"font-medium\">üìà Trends</h5>\n              <p className=\"text-xs text-muted-foreground\">Voortgang over tijd</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    ),\n  },\n  {\n    title: \"üîî Meldingen & Updates\",\n    content: (\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center gap-3 p-3 bg-yellow-50 rounded-lg\">\n          <Bell className=\"w-8 h-8 text-yellow-600\" />\n          <div>\n            <h4 className=\"font-semibold text-yellow-800\">Automatische Updates</h4>\n            <p className=\"text-sm text-yellow-600\">\n              Blijf op de hoogte zonder te bemoeien\n            </p>\n          </div>\n        </div>\n        \n        <div className=\"space-y-3\">\n          <h4 className=\"font-semibold\">Wanneer krijg je meldingen?</h4>\n          <ul className=\"space-y-2 text-sm\">\n            <li className=\"flex items-center gap-2\">\n              <CheckCircle className=\"w-4 h-4 text-green-600\" />\n              Wanneer je kind een toets heeft voltooid\n            </li>\n            <li className=\"flex items-center gap-2\">\n              <CheckCircle className=\"w-4 h-4 text-green-600\" />\n              Bij belangrijke deadlines die dichtbij komen\n            </li>\n            <li className=\"flex items-center gap-2\">\n              <CheckCircle className=\"w-4 h-4 text-green-600\" />\n              Als je kind een paar dagen geen check-in heeft gedaan\n            </li>\n            <li className=\"flex items-center gap-2\">\n              <CheckCircle className=\"w-4 h-4 text-green-600\" />\n              Weekly summary van de voortgang\n            </li>\n          </ul>\n        </div>\n\n        <div className=\"bg-blue-50 p-3 rounded-lg\">\n          <p className=\"text-sm text-blue-800\">\n            üì± <strong>Privacy eerst:</strong> Je ziet voortgang, niet de inhoud van gesprekken.\n          </p>\n        </div>\n      </div>\n    ),\n  },\n  {\n    title: \"üí° Tips voor Ouders\",\n    content: (\n      <div className=\"space-y-4\">\n        <div className=\"space-y-3\">\n          <div className=\"p-3 bg-green-50 rounded-lg\">\n            <h4 className=\"font-semibold text-green-800 mb-2\">üéØ Stimuleer zelfstandigheid</h4>\n            <p className=\"text-sm text-green-700\">\n              Laat je kind zelf de app gebruiken. Jij kijkt mee, zij doen het werk. Dit helpt hen zelfstandiger te worden.\n            </p>\n          </div>\n          \n          <div className=\"p-3 bg-blue-50 rounded-lg\">\n            <h4 className=\"font-semibold text-blue-800 mb-2\">üí¨ Bespreek de voortgang</h4>\n            <p className=\"text-sm text-blue-700\">\n              Gebruik wat je hier ziet als gespreksstarter. \"Ik zag dat je veel wiskunde hebt gedaan deze week!\"\n            </p>\n          </div>\n          \n          <div className=\"p-3 bg-purple-50 rounded-lg\">\n            <h4 className=\"font-semibold text-purple-800 mb-2\">üèÜ Vier successen</h4>\n            <p className=\"text-sm text-purple-700\">\n              Complimenteer je kind wanneer je ziet dat ze consistent bezig zijn, ook met kleine stapjes.\n            </p>\n          </div>\n          \n          <div className=\"p-3 bg-orange-50 rounded-lg\">\n            <h4 className=\"font-semibold text-orange-800 mb-2\">ü§ù Ondersteun bij problemen</h4>\n            <p className=\"text-sm text-orange-700\">\n              Als je ziet dat er weinig activiteit is, vraag hoe je kunt helpen in plaats van direct in te grijpen.\n            </p>\n          </div>\n        </div>\n      </div>\n    ),\n  },\n];\n\nexport default function ParentIntroModal({ open, onOpenChange }: ParentIntroModalProps) {\n  const [currentStep, setCurrentStep] = useState(0);\n\n  const nextStep = () => {\n    if (currentStep < parentIntroSteps.length - 1) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const prevStep = () => {\n    if (currentStep > 0) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const handleClose = () => {\n    setCurrentStep(0);\n    onOpenChange(false);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-md max-h-[80vh] overflow-y-auto\" data-testid=\"parent-intro-modal\">\n        <DialogHeader>\n          <DialogTitle className=\"text-center\">\n            {parentIntroSteps[currentStep].title}\n          </DialogTitle>\n          <DialogDescription className=\"text-center\">\n            Stap {currentStep + 1} van {parentIntroSteps.length}\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"py-4\">\n          {parentIntroSteps[currentStep].content}\n        </div>\n\n        <Separator />\n\n        <div className=\"flex items-center justify-between pt-4\">\n          <Button\n            variant=\"outline\"\n            onClick={prevStep}\n            disabled={currentStep === 0}\n            className=\"flex items-center gap-2\"\n            data-testid=\"button-prev-step\"\n          >\n            <ChevronLeft className=\"w-4 h-4\" />\n            Vorige\n          </Button>\n\n          <div className=\"flex gap-2\">\n            {parentIntroSteps.map((_, index) => (\n              <div\n                key={index}\n                className={`w-2 h-2 rounded-full transition-colors ${\n                  index === currentStep ? 'bg-primary' : 'bg-muted'\n                }`}\n              />\n            ))}\n          </div>\n\n          {currentStep < parentIntroSteps.length - 1 ? (\n            <Button\n              onClick={nextStep}\n              className=\"flex items-center gap-2\"\n              data-testid=\"button-next-step\"\n            >\n              Volgende\n              <ChevronRight className=\"w-4 h-4\" />\n            </Button>\n          ) : (\n            <Button\n              onClick={handleClose}\n              className=\"flex items-center gap-2\"\n              data-testid=\"button-close-intro\"\n            >\n              Begin!\n              <Heart className=\"w-4 h-4\" />\n            </Button>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":10721},"client/src/pages/Instellingen.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/lib/auth\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Upload, \n  Palette, \n  GraduationCap, \n  Bell, \n  Clock,\n  Calendar,\n  Download,\n  Upload as UploadIcon\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n// App kleur thema's\nconst colorThemes = [\n  { \n    id: \"purple\", \n    name: \"Paars (Standaard)\", \n    primary: \"hsl(262.1, 83.3%, 57.8%)\",\n    preview: \"bg-purple-500\"\n  },\n  { \n    id: \"blue\", \n    name: \"Blauw\", \n    primary: \"hsl(217.2, 91.2%, 59.8%)\",\n    preview: \"bg-blue-500\"\n  },\n  { \n    id: \"green\", \n    name: \"Groen\", \n    primary: \"hsl(142.1, 76.2%, 36.3%)\",\n    preview: \"bg-green-500\"\n  },\n  { \n    id: \"pink\", \n    name: \"Roze\", \n    primary: \"hsl(330.1, 81.2%, 60.4%)\",\n    preview: \"bg-pink-500\"\n  }\n];\n\n// Jaargang opties per onderwijstype\nconst educationLevels = {\n  vmbo: [\"vmbo 1\", \"vmbo 2\", \"vmbo 3\", \"vmbo 4\"],\n  havo: [\"havo 3\", \"havo 4\", \"havo 5\"],\n  vwo: [\"vwo 3\", \"vwo 4\", \"vwo 5\", \"vwo 6\"],\n  mbo: [\"mbo 1\", \"mbo 2\", \"mbo 3\", \"mbo 4\"]\n};\n\nexport default function Instellingen() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [selectedTheme, setSelectedTheme] = useState(\"purple\");\n  const [selectedEducation, setSelectedEducation] = useState(\"havo\");\n  const [selectedGrade, setSelectedGrade] = useState(\"havo 5\");\n  const [notificationsEnabled, setNotificationsEnabled] = useState(true);\n  const [reminderTime, setReminderTime] = useState(\"18:00\");\n\n  const handleThemeChange = (themeId: string) => {\n    setSelectedTheme(themeId);\n    const theme = colorThemes.find(t => t.id === themeId);\n    if (theme) {\n      // Update CSS custom property for primary color\n      document.documentElement.style.setProperty('--primary', theme.primary);\n      toast({\n        title: \"Thema gewijzigd\",\n        description: `App kleur veranderd naar ${theme.name}`,\n      });\n    }\n  };\n\n  const handleRosterImport = (file: File) => {\n    // Handle roster file import (CSV/iCal)\n    const fileType = file.name.split('.').pop()?.toLowerCase();\n    \n    if (!['csv', 'ics', 'ical'].includes(fileType || '')) {\n      toast({\n        title: \"Ongeldig bestand\",\n        description: \"Upload een .csv of .ics bestand\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    toast({\n      title: \"Rooster import gestart\",\n      description: `${file.name} wordt ge√Ømporteerd...`,\n    });\n    \n    // TODO: Implement actual import logic\n  };\n\n  const exportRoster = () => {\n    toast({\n      title: \"Rooster export\",\n      description: \"Je rooster wordt gedownload als CSV bestand\",\n    });\n    // TODO: Implement export logic\n  };\n\n  return (\n    <div className=\"p-4 space-y-6\" data-testid=\"instellingen-page\">\n      <div className=\"text-center mb-6\">\n        <h1 className=\"text-2xl font-bold text-foreground mb-2\">Instellingen</h1>\n        <p className=\"text-sm text-muted-foreground\">\n          Pas je app aan naar jouw wensen\n        </p>\n      </div>\n\n      {/* App Thema */}\n      <Card data-testid=\"theme-settings\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Palette className=\"w-5 h-5\" />\n            App Kleur\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 gap-3\">\n            {colorThemes.map((theme) => (\n              <button\n                key={theme.id}\n                onClick={() => handleThemeChange(theme.id)}\n                className={`p-3 rounded-lg border-2 transition-all ${\n                  selectedTheme === theme.id \n                    ? 'border-primary bg-primary/10' \n                    : 'border-border hover:border-primary/50'\n                }`}\n                data-testid={`theme-${theme.id}`}\n              >\n                <div className=\"flex items-center gap-3\">\n                  <div className={`w-6 h-6 rounded-full ${theme.preview}`} />\n                  <span className=\"text-sm font-medium\">{theme.name}</span>\n                </div>\n              </button>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Onderwijsniveau & Jaargang */}\n      <Card data-testid=\"education-settings\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <GraduationCap className=\"w-5 h-5\" />\n            Onderwijsniveau\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"education-level\">Onderwijstype</Label>\n            <Select value={selectedEducation} onValueChange={setSelectedEducation}>\n              <SelectTrigger data-testid=\"select-education\">\n                <SelectValue placeholder=\"Kies onderwijstype\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"vmbo\">VMBO</SelectItem>\n                <SelectItem value=\"havo\">HAVO</SelectItem>\n                <SelectItem value=\"vwo\">VWO</SelectItem>\n                <SelectItem value=\"mbo\">MBO</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"grade-level\">Jaargang</Label>\n            <Select value={selectedGrade} onValueChange={setSelectedGrade}>\n              <SelectTrigger data-testid=\"select-grade\">\n                <SelectValue placeholder=\"Kies jaargang\" />\n              </SelectTrigger>\n              <SelectContent>\n                {educationLevels[selectedEducation as keyof typeof educationLevels].map((grade) => (\n                  <SelectItem key={grade} value={grade}>{grade}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"bg-blue-50 p-3 rounded-lg\">\n            <p className=\"text-sm text-blue-800\">\n              üí° Deze instelling helpt bij het maken van gepaste taken en uitleg\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Notificaties */}\n      <Card data-testid=\"notification-settings\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Bell className=\"w-5 h-5\" />\n            Meldingen\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-1\">\n              <Label htmlFor=\"notifications\">Dagelijkse herinneringen</Label>\n              <p className=\"text-sm text-muted-foreground\">\n                Ontvang elke dag een herinnering om je huiswerk te checken\n              </p>\n            </div>\n            <Switch\n              id=\"notifications\"\n              checked={notificationsEnabled}\n              onCheckedChange={setNotificationsEnabled}\n              data-testid=\"switch-notifications\"\n            />\n          </div>\n\n          {notificationsEnabled && (\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"reminder-time\">Herinnering tijd</Label>\n              <div className=\"flex items-center gap-2\">\n                <Clock className=\"w-4 h-4 text-muted-foreground\" />\n                <Input\n                  id=\"reminder-time\"\n                  type=\"time\"\n                  value={reminderTime}\n                  onChange={(e) => setReminderTime(e.target.value)}\n                  className=\"w-32\"\n                  data-testid=\"input-reminder-time\"\n                />\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Rooster Import/Export */}\n      <Card data-testid=\"roster-settings\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Calendar className=\"w-5 h-5\" />\n            Rooster Beheer\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-3\">\n            <div>\n              <Label htmlFor=\"roster-import\">Rooster Importeren</Label>\n              <p className=\"text-sm text-muted-foreground mb-2\">\n                Upload een .csv of .ics bestand van je schoolrooster\n              </p>\n              <div className=\"flex gap-2\">\n                <Input\n                  id=\"roster-import\"\n                  type=\"file\"\n                  accept=\".csv,.ics,.ical\"\n                  onChange={(e) => {\n                    const file = e.target.files?.[0];\n                    if (file) handleRosterImport(file);\n                  }}\n                  className=\"hidden\"\n                  data-testid=\"input-roster-import\"\n                />\n                <Button\n                  onClick={() => document.getElementById('roster-import')?.click()}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"flex items-center gap-2\"\n                  data-testid=\"button-import-roster\"\n                >\n                  <UploadIcon className=\"w-4 h-4\" />\n                  Bestand kiezen\n                </Button>\n              </div>\n            </div>\n\n            <Separator />\n\n            <div>\n              <Label>Rooster Exporteren</Label>\n              <p className=\"text-sm text-muted-foreground mb-2\">\n                Download je huidige rooster als CSV bestand\n              </p>\n              <Button\n                onClick={exportRoster}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"flex items-center gap-2\"\n                data-testid=\"button-export-roster\"\n              >\n                <Download className=\"w-4 h-4\" />\n                Download Rooster\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Rooster Import */}\n      <Card data-testid=\"calendar-integration\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Calendar className=\"w-5 h-5\" />\n            Rooster Import\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"p-4 bg-muted/50 rounded-lg\">\n            <h4 className=\"font-semibold mb-2\">üìÖ Rooster Import</h4>\n            <p className=\"text-sm text-muted-foreground mb-3\">\n              Importeer je school rooster via iCal URL (SomToday, Zermelo, etc.)\n            </p>\n            <p className=\"text-xs text-muted-foreground\">\n              üí° Ga naar het Rooster tabblad om je rooster te importeren\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Account Info */}\n      <Card data-testid=\"account-info\">\n        <CardHeader>\n          <CardTitle>Account Informatie</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-sm font-medium\">Naam:</span>\n            <span className=\"text-sm\">{user?.user_metadata?.full_name || 'Anouk'}</span>\n          </div>\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-sm font-medium\">Email:</span>\n            <span className=\"text-sm\">{user?.email}</span>\n          </div>\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-sm font-medium\">Rol:</span>\n            <Badge variant=\"secondary\">{user?.user_metadata?.role || 'student'}</Badge>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Save Button */}\n      <div className=\"flex justify-center pt-4\">\n        <Button \n          className=\"w-full max-w-xs\"\n          onClick={() => {\n            toast({\n              title: \"Instellingen opgeslagen\",\n              description: \"Je voorkeuren zijn succesvol opgeslagen\",\n            });\n          }}\n          data-testid=\"button-save-settings\"\n        >\n          Instellingen Opslaan\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":12366},"client/src/components/TextCheckin.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Send } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/lib/auth\";\n\nexport default function TextCheckin() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [inputText, setInputText] = useState(\"\");\n\n  const planMutation = useMutation({\n    mutationFn: async (text: string) => {\n      const planResponse = await apiRequest(\"POST\", \"/api/plan\", {\n        transcript: text,\n        date: new Date().toISOString(),\n        userId: user?.id\n      });\n      \n      return await planResponse.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Check-in voltooid!\",\n        description: `${data.tasks.length} nieuwe taken aangemaakt.`,\n      });\n      \n      setInputText(\"\");\n      queryClient.invalidateQueries({ queryKey: ['/api/tasks'] });\n    },\n    onError: (error) => {\n      console.error(\"Planning error:\", error);\n      toast({\n        title: \"Fout bij verwerken\",\n        description: \"Probeer het opnieuw.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleSubmit = () => {\n    if (!inputText.trim()) return;\n    planMutation.mutate(inputText.trim());\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <Textarea\n        value={inputText}\n        onChange={(e) => setInputText(e.target.value)}\n        placeholder=\"Vertel wat je vandaag wilt doen... bijvoorbeeld: 'Ik moet voor wiskunde hoofdstuk 3 leren, nederlands essay schrijven en voor de toets van maandag studeren'\"\n        className=\"min-h-[100px] resize-none\"\n        data-testid=\"input-checkin-text\"\n      />\n      \n      <Button\n        onClick={handleSubmit}\n        disabled={planMutation.isPending || !inputText.trim()}\n        className=\"w-full\"\n        data-testid=\"button-submit-checkin\"\n      >\n        {planMutation.isPending ? (\n          \"Bezig met planning maken...\"\n        ) : (\n          <>\n            <Send className=\"w-4 h-4 mr-2\" />\n            Planning maken\n          </>\n        )}\n      </Button>\n    </div>\n  );\n}","size_bytes":2314}},"version":1}